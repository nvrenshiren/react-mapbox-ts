(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[47],{"1EAL":function(r,n,e){"use strict";e.r(n);e("h7lp");var t=e("bf48"),a=(e("+L6B"),e("2/Rp")),o=e("tJVT"),s=(e("tU7J"),e("wFql")),i=(e("lUTK"),e("BvKs")),c=(e("B9cy"),e("Ol7k")),p=e("vn4u"),m={style:{title:"\u6837\u5f0f",items:[{name:"\u5730\u56fe",key:"map",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useRef } from 'react'\r\nimport { Map } from 'react-mapbox-ts'\r\nexport default () => {\r\n  const mapRef = useRef()\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n      center={mapboxConf.center}\r\n      zoom={mapboxConf.zoom}\r\n    />\r\n  )\r\n}\r\n",des:"Display a map",sanbox:"https://codesandbox.io/s/ditu-tm8y0"},{name:"\u5730\u56fe\u6807\u6ce8",key:"marker",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport { Button, Tooltip } from 'antd'\r\nimport React, { useRef } from 'react'\r\nimport { Map, Marker } from 'react-mapbox-ts'\r\nexport default () => {\r\n  const mapRef = useRef()\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n      center={mapboxConf.center}\r\n      zoom={mapboxConf.zoom}\r\n    >\r\n      <Marker positon={[mapboxConf.center.lon, mapboxConf.center.lat]}>\r\n        <div id=\"marker-popup\">\r\n          <Tooltip\r\n            title={<div>HTML\u63d0\u793a\u6846</div>}\r\n            getPopupContainer={() => document.getElementById('marker-popup')}\r\n          >\r\n            <Button type=\"primary\">HTML\u6807\u6ce8</Button>\r\n          </Tooltip>\r\n        </div>\r\n      </Marker>\r\n      <Marker draggable positon={[114.365248, 30.53786]}>\r\n        <Button type=\"primary\" danger>\r\n          \u53ef\u62d6\u52a8\r\n        </Button>\r\n      </Marker>\r\n      <Marker\r\n        positon={[114.352309, 30.518589]}\r\n        popup={<div>\u539f\u751f\u63d0\u793a\u6846</div>}\r\n        popupOption={{\r\n          closeOnClick: true,\r\n          closeButton: false,\r\n          closeOnMove: true,\r\n          offset: 20\r\n        }}\r\n      >\r\n        <Button type=\"default\" shape=\"round\">\r\n          \u539f\u751f\u63d0\u793a\u6846\r\n        </Button>\r\n      </Marker>\r\n    </Map>\r\n  )\r\n}\r\n",des:"Add a default Marker to the map.",sanbox:"https://codesandbox.io/s/ditubiaozhu-vm01w"},{name:"\u6e32\u67d3\u4e16\u754c\u526f\u672c",key:"worldCopies",code:"import { Map } from 'react-mapbox-ts'\r\nimport { Radio } from 'antd'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { RadioChangeEvent } from 'antd/lib/radio'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nconst defaultValue = 1\r\nexport default () => {\r\n  const [value, setValue] = useState(!!defaultValue)\r\n  const ValueChange = useCallback((e: RadioChangeEvent) => {\r\n    setValue(!!e.target.value)\r\n  }, [])\r\n  return (\r\n    <div className=\"full\">\r\n      <Map\r\n        // ref={mapRef}\r\n        ref={(map) => {\r\n          window.map = map\r\n        }}\r\n        accessToken={mapboxConf.accessToken}\r\n        style=\"mapbox://styles/mapbox/streets-v11\"\r\n        renderWorldCopies={!!value}\r\n        center={mapboxConf.center}\r\n        zoom={mapboxConf.zoom}\r\n      />\r\n      <div style={{ position: 'absolute', top: 0 }}>\r\n        <Radio.Group\r\n          defaultValue={defaultValue}\r\n          onChange={ValueChange}\r\n          buttonStyle=\"solid\"\r\n        >\r\n          <Radio.Button value={1}>True</Radio.Button>\r\n          <Radio.Button value={0}>False</Radio.Button>\r\n        </Radio.Group>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",des:"Toggle between rendering a single world and multiple copies of the world.",sanbox:"https://codesandbox.io/s/ditufuben-d9olj"},{name:"\u66f4\u6539\u6837\u5f0f",key:"changeStyle",code:"import { Map } from 'react-mapbox-ts'\r\nimport { Radio } from 'antd'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { RadioChangeEvent } from 'antd/lib/radio'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\n\r\nconst defaultValue = 'streets-v11'\r\nexport default () => {\r\n  const [style, setStyle] = useState(defaultValue)\r\n  const StyleChange = useCallback((e: RadioChangeEvent) => {\r\n    setStyle(e.target.value)\r\n  }, [])\r\n  return (\r\n    <div className=\"full\">\r\n      <Map\r\n        // ref={mapRef}\r\n        ref={(map) => {\r\n          window.map = map\r\n        }}\r\n        accessToken={mapboxConf.accessToken}\r\n        style={`mapbox://styles/mapbox/${style}`}\r\n        center={mapboxConf.center}\r\n        zoom={mapboxConf.zoom}\r\n      />\r\n      <div style={{ position: 'absolute', top: 0 }}>\r\n        <Radio.Group\r\n          defaultValue={defaultValue}\r\n          onChange={StyleChange}\r\n          buttonStyle=\"solid\"\r\n        >\r\n          <Radio.Button value=\"streets-v11\">Streets</Radio.Button>\r\n          <Radio.Button value=\"light-v10\">Light</Radio.Button>\r\n          <Radio.Button value=\"dark-v10\">Dark</Radio.Button>\r\n          <Radio.Button value=\"outdoors-v11\">Outdoors</Radio.Button>\r\n          <Radio.Button value=\"satellite-v9\">Satellite</Radio.Button>\r\n        </Radio.Group>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",des:"Switch to another map style",sanbox:"https://codesandbox.io/s/dituyangshi-dgdd8"},{name:"\u751f\u6210\u56fe\u6807",key:"generatedIcon",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useMemo, useRef } from 'react'\r\nimport { AddImage, GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const width = 64\r\n  const imgData = useMemo(() => {\r\n    const bytesPerPixel = 4\r\n    const data = new Uint8Array(width * width * bytesPerPixel)\r\n    for (var x = 0; x < width; x++) {\r\n      for (var y = 0; y < width; y++) {\r\n        var offset = (y * width + x) * bytesPerPixel\r\n        data[offset + 0] = (y / width) * 255 // red\r\n        data[offset + 1] = (x / width) * 255 // green\r\n        data[offset + 2] = 128 // blue\r\n        data[offset + 3] = 255 // alpha\r\n      }\r\n    }\r\n    return data\r\n  }, [])\r\n\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n    >\r\n      <AddImage\r\n        name=\"gradient\"\r\n        image={{\r\n          width,\r\n          height: width,\r\n          data: imgData\r\n        }}\r\n      >\r\n        <GeoJSONSource\r\n          id=\"point\"\r\n          option={{\r\n            data: {\r\n              type: 'FeatureCollection',\r\n              features: [\r\n                {\r\n                  type: 'Feature',\r\n                  geometry: {\r\n                    type: 'Point',\r\n                    coordinates: [0, 0]\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        >\r\n          <Layer\r\n            id=\"points\"\r\n            type=\"symbol\"\r\n            source=\"point\"\r\n            layout={{\r\n              'icon-image': 'gradient'\r\n            }}\r\n          />\r\n        </GeoJSONSource>\r\n      </AddImage>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Add an icon to the map that was generated at runtime.",sanbox:"https://codesandbox.io/s/shengchengtupian-t692w"},{name:"\u52a8\u753b\u56fe\u6807",key:"animatedIcon",code:"import React, { useRef, useEffect, useMemo, useState } from 'react'\r\nimport { Map, AddImage, GeoJSONSource, Layer } from 'react-mapbox-ts'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\n\r\nclass imageData {\r\n  size: number = 0\r\n  width: number\r\n  height: number\r\n  data: Uint8ClampedArray | Uint8Array\r\n  context: CanvasRenderingContext2D\r\n  map: mapboxgl.MapBoxPlus\r\n  constructor(size: number) {\r\n    this.size = this.width = this.height = size\r\n    this.data = new Uint8Array(size * size * 4)\r\n  }\r\n  onAdd(map: mapboxgl.MapBoxPlus) {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = this.size\r\n    canvas.height = this.size\r\n    this.context = canvas.getContext('2d')\r\n    this.map = map\r\n  }\r\n  render() {\r\n    var duration = 1000\r\n    var t = (performance.now() % duration) / duration\r\n    var radius = (this.size / 2) * 0.3\r\n    var outerRadius = (this.size / 2) * 0.7 * t + radius\r\n    var context = this.context\r\n    context.clearRect(0, 0, this.width, this.height)\r\n    context.beginPath()\r\n    context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2)\r\n    context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')'\r\n    context.fill()\r\n    context.beginPath()\r\n    context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2)\r\n    context.fillStyle = 'rgba(255, 100, 100, 1)'\r\n    context.strokeStyle = 'white'\r\n    context.lineWidth = 2 + 4 * (1 - t)\r\n    context.fill()\r\n    context.stroke()\r\n    this.data = context.getImageData(0, 0, this.width, this.height).data\r\n    if (!!this.map) {\r\n      this.map.triggerRepaint()\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  const imgClass = useMemo(() => new imageData(200), [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n    >\r\n      <AddImage\r\n        name=\"pulsing-dot\"\r\n        image={imgClass}\r\n        options={{\r\n          pixelRatio: 2\r\n        }}\r\n      >\r\n        <GeoJSONSource\r\n          id=\"point\"\r\n          option={{\r\n            data: {\r\n              type: 'FeatureCollection',\r\n              features: [\r\n                {\r\n                  type: 'Feature',\r\n                  geometry: {\r\n                    type: 'Point',\r\n                    coordinates: [0, 0]\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        >\r\n          <Layer\r\n            id=\"points\"\r\n            type=\"symbol\"\r\n            source=\"point\"\r\n            layout={{\r\n              'icon-image': 'pulsing-dot'\r\n            }}\r\n          />\r\n        </GeoJSONSource>\r\n      </AddImage>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Add an animated icon to the map that was generated at runtime with a Canvas.",sanbox:"https://codesandbox.io/s/tianjiadonghuatupian-bv2vl"},{name:"\u56fe\u7247\u63d2\u5165",key:"picIcon",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useRef } from 'react'\r\nimport { GeoJSONSource, Layer, LoadImage, Map } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n    >\r\n      <LoadImage\r\n        name=\"cat\"\r\n        url=\"https://upload.wikimedia.org/wikipedia/commons/7/7c/201408_cat.png\"\r\n        options={{\r\n          pixelRatio: 2\r\n        }}\r\n      >\r\n        <GeoJSONSource\r\n          id=\"point\"\r\n          option={{\r\n            data: {\r\n              type: 'FeatureCollection',\r\n              features: [\r\n                {\r\n                  type: 'Feature',\r\n                  geometry: {\r\n                    type: 'Point',\r\n                    coordinates: [0, 0]\r\n                  }\r\n                },\r\n                {\r\n                  type: 'Feature',\r\n                  geometry: {\r\n                    type: 'Point',\r\n                    coordinates: [5, 5]\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        >\r\n          <Layer\r\n            id=\"points\"\r\n            type=\"symbol\"\r\n            source=\"point\"\r\n            layout={{\r\n              'icon-image': 'cat',\r\n              'icon-size': 0.25\r\n            }}\r\n          />\r\n        </GeoJSONSource>\r\n      </LoadImage>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Add an icon to the map from an external URL and use it in a symbol layer.",sanbox:"https://codesandbox.io/s/tianjiatupian-lry4d"}]},layers:{title:"\u56fe\u5c42",items:[{name:"3D\u6a21\u578b",key:"model3D",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport React, { useRef } from 'react'\r\nimport { Map, CustomLayerData, CustomLayer } from 'react-mapbox-ts'\r\nimport { LngLatLike } from 'mapbox-gl'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\nimport * as THREE from 'three'\r\n\r\nconst customLayerData = (): CustomLayerData => {\r\n  const modelOrigin: LngLatLike = [148.9819, -35.39847]\r\n  const modelAltitude = 0\r\n  const modelRotate = [Math.PI / 2, 0, 0]\r\n  const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(\r\n    modelOrigin,\r\n    modelAltitude\r\n  )\r\n  const modelTransform = {\r\n    translateX: modelAsMercatorCoordinate.x,\r\n    translateY: modelAsMercatorCoordinate.y,\r\n    translateZ: modelAsMercatorCoordinate.z,\r\n    rotateX: modelRotate[0],\r\n    rotateY: modelRotate[1],\r\n    rotateZ: modelRotate[2],\r\n    scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\r\n  }\r\n  return {\r\n    id: '3d-model',\r\n    type: 'custom',\r\n    renderingMode: '3d',\r\n    render(gl, matrix) {\r\n      var rotationX = new THREE.Matrix4().makeRotationAxis(\r\n        new THREE.Vector3(1, 0, 0),\r\n        modelTransform.rotateX\r\n      )\r\n      var rotationY = new THREE.Matrix4().makeRotationAxis(\r\n        new THREE.Vector3(0, 1, 0),\r\n        modelTransform.rotateY\r\n      )\r\n      var rotationZ = new THREE.Matrix4().makeRotationAxis(\r\n        new THREE.Vector3(0, 0, 1),\r\n        modelTransform.rotateZ\r\n      )\r\n      var m = new THREE.Matrix4().fromArray(matrix)\r\n      var l = new THREE.Matrix4()\r\n        .makeTranslation(\r\n          modelTransform.translateX,\r\n          modelTransform.translateY,\r\n          modelTransform.translateZ\r\n        )\r\n        .scale(\r\n          new THREE.Vector3(\r\n            modelTransform.scale,\r\n            -modelTransform.scale,\r\n            modelTransform.scale\r\n          )\r\n        )\r\n        .multiply(rotationX)\r\n        .multiply(rotationY)\r\n        .multiply(rotationZ)\r\n      this.camera.projectionMatrix = m.multiply(l)\r\n      this.renderer.state.reset()\r\n      this.renderer.render(this.scene, this.camera)\r\n      this.map.triggerRepaint()\r\n    },\r\n    onAdd(map, gl) {\r\n      this.map = map\r\n      this.camera = new THREE.Camera()\r\n      this.scene = new THREE.Scene()\r\n      var directionalLight = new THREE.DirectionalLight(0xffffff)\r\n      directionalLight.position.set(0, -70, 100).normalize()\r\n      this.scene.add(directionalLight)\r\n\r\n      var directionalLight2 = new THREE.DirectionalLight(0xffffff)\r\n      directionalLight2.position.set(0, 70, 100).normalize()\r\n      this.scene.add(directionalLight2)\r\n      var loader = new GLTFLoader()\r\n      loader.load(\r\n        'https://docs.mapbox.com/mapbox-gl-js/assets/34M_17/34M_17.gltf',\r\n        (gltf) => {\r\n          this.scene.add(gltf.scene)\r\n        }\r\n      )\r\n      this.renderer = new THREE.WebGLRenderer({\r\n        canvas: map.getCanvas(),\r\n        context: gl,\r\n        antialias: true\r\n      })\r\n      this.renderer.autoClear = false\r\n    }\r\n  }\r\n}\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n        mapRef.current = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/light-v10\"\r\n      zoom={18}\r\n      center={[148.9819, -35.3981]}\r\n      pitch={60}\r\n      antialias={true}\r\n    >\r\n      <CustomLayer data={customLayerData()} />\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Use a custom style layer with three.js to add a 3D model to the map.",sanbox:"https://codesandbox.io/s/3dmoxing-h8bms"},{name:"\u56fe\u7247\u6e32\u67d3\u591a\u8fb9\u5f62",key:"polygonPic",code:"import React, { useRef, useEffect } from 'react'\r\nimport { Map, GeoJSONSource, LoadImage, Layer } from 'react-mapbox-ts'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  useEffect(() => {}, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n      center={[-30, -25]}\r\n      zoom={1}\r\n      workercount={100}\r\n    >\r\n      <LoadImage\r\n        name=\"pattern\"\r\n        url=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/64px-Cat_silhouette.svg.png\"\r\n      >\r\n        <GeoJSONSource\r\n          id=\"source\"\r\n          option={{\r\n            data: {\r\n              type: 'Feature',\r\n              properties: {},\r\n              geometry: {\r\n                type: 'Polygon',\r\n                coordinates: [\r\n                  [\r\n                    [-30, -25],\r\n                    [-30, 35],\r\n                    [30, 35],\r\n                    [30, -25],\r\n                    [-30, -25]\r\n                  ]\r\n                ]\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <Layer\r\n            id=\"pattern-layer\"\r\n            type=\"fill\"\r\n            source=\"source\"\r\n            paint={{\r\n              'fill-pattern': 'pattern'\r\n            }}\r\n          />\r\n        </GeoJSONSource>\r\n      </LoadImage>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Use fill-pattern to draw a polygon from a repeating image pattern."},{name:"\u70b9\u52a8\u753b",key:"pointAnimate",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport React, { useCallback, useRef, useState } from 'react'\r\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  const [data, setData] = useState<any>()\r\n  const radius = 20\r\n  const pointOnCircle = useCallback((angle: number) => {\r\n    return {\r\n      type: 'Point',\r\n      coordinates: [Math.cos(angle) * radius, Math.sin(angle) * radius]\r\n    }\r\n  }, [])\r\n  const animate = useCallback(() => {\r\n    function animateLine(timestamp?: number) {\r\n      setData(pointOnCircle(timestamp / 1000))\r\n      requestAnimationFrame(animateLine)\r\n    }\r\n    animateLine()\r\n  }, [])\r\n\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n        mapRef.current = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/streets-v11\"\r\n      zoom={2}\r\n      center={[0, 0]}\r\n      onLoad={() => {\r\n        animate()\r\n      }}\r\n    >\r\n      <GeoJSONSource\r\n        id=\"point\"\r\n        option={{\r\n          data: data || pointOnCircle(0)\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"point\"\r\n          source=\"point\"\r\n          type=\"circle\"\r\n          paint={{\r\n            'circle-radius': 10,\r\n            'circle-color': '#007cbf'\r\n          }}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Animate the position of a point by updating a GeoJSON source on each frame.",sanbox:"https://codesandbox.io/s/diandonghua-xpkwl"},{name:"\u56fe\u5c42\u900f\u660e\u5ea6",key:"opacityLayer",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport { Slider } from 'antd'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport React, { useCallback, useRef, useState } from 'react'\r\nimport { Layer, Map, RasterSource } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  const [opacity, setOpacity] = useState(40)\r\n  const onChange = useCallback(\r\n    (value: number) => {\r\n      setOpacity(value)\r\n    },\r\n    [opacity]\r\n  )\r\n  return (\r\n    <div className=\"full\">\r\n      <Map\r\n        // ref={mapRef}\r\n        ref={(map) => {\r\n          window.map = map\r\n          mapRef.current = map\r\n        }}\r\n        accessToken={mapboxConf.accessToken}\r\n        style=\"mapbox://styles/mapbox/dark-v9\"\r\n        zoom={10}\r\n        center={[-87.6321, 41.8362]}\r\n        minZoom={9}\r\n        maxZoom={13}\r\n      >\r\n        <RasterSource\r\n          id=\"chicago\"\r\n          option={{\r\n            url: 'mapbox://mapbox.u8yyzaor'\r\n          }}\r\n        >\r\n          <Layer\r\n            id=\"chicago\"\r\n            source=\"chicago\"\r\n            type=\"raster\"\r\n            paint={{\r\n              'raster-opacity': opacity / 100\r\n            }}\r\n          />\r\n        </RasterSource>\r\n      </Map>\r\n      <div style={{ position: 'absolute', top: 16, width: '60%', left: '20%' }}>\r\n        <Slider\r\n          min={0}\r\n          max={100}\r\n          step={10}\r\n          value={opacity}\r\n          defaultValue={40}\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Drag the range slider to adjust the opacity of a raster layer on top of a map.",sanbox:"https://codesandbox.io/s/tucengtoumingdu-yie0w"},{name:"GeoJSON\u7ebf",key:"lineGeoJSON",code:"import React, { useRef, useEffect } from 'react'\r\nimport { Map, GeoJSONSource, Layer } from 'react-mapbox-ts'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  useEffect(() => {}, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n      center={[-122.486052, 37.830348]}\r\n      zoom={15}\r\n      workercount={100}\r\n    >\r\n      <GeoJSONSource\r\n        id=\"route\"\r\n        option={{\r\n          data: {\r\n            type: 'Feature',\r\n            properties: {},\r\n            geometry: {\r\n              type: 'LineString',\r\n              coordinates: [\r\n                [-122.48369693756104, 37.83381888486939],\r\n                [-122.48348236083984, 37.83317489144141],\r\n                [-122.48339653015138, 37.83270036637107],\r\n                [-122.48356819152832, 37.832056363179625],\r\n                [-122.48404026031496, 37.83114119107971],\r\n                [-122.48404026031496, 37.83049717427869],\r\n                [-122.48348236083984, 37.829920943955045],\r\n                [-122.48356819152832, 37.82954808664175],\r\n                [-122.48507022857666, 37.82944639795659],\r\n                [-122.48610019683838, 37.82880236636284],\r\n                [-122.48695850372314, 37.82931081282506],\r\n                [-122.48700141906738, 37.83080223556934],\r\n                [-122.48751640319824, 37.83168351665737],\r\n                [-122.48803138732912, 37.832158048267786],\r\n                [-122.48888969421387, 37.83297152392784],\r\n                [-122.48987674713133, 37.83263257682617],\r\n                [-122.49043464660643, 37.832937629287755],\r\n                [-122.49125003814696, 37.832429207817725],\r\n                [-122.49163627624512, 37.832564787218985],\r\n                [-122.49223709106445, 37.83337825839438],\r\n                [-122.49378204345702, 37.83368330777276]\r\n              ]\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"route-line\"\r\n          source=\"route\"\r\n          type=\"line\"\r\n          layout={{\r\n            'line-join': 'round',\r\n            'line-cap': 'round'\r\n          }}\r\n          paint={{\r\n            'line-color': '#888',\r\n            'line-width': 8\r\n          }}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Add a GeoJSON line to a map."},{name:"\u7ebf\u52a8\u753b",key:"lineAnimate",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport React, { useRef, useCallback, useState } from 'react'\r\nimport { Map, GeoJSONSource, Layer } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  const animation = useRef<number>()\r\n  const [data, setData] = useState<any>([[0, 0]])\r\n  const dataRef = useRef([[0, 0]])\r\n  const resetTime = useRef(false)\r\n  const startTime = useRef(0)\r\n  const progress = useRef(0)\r\n  const animate = useCallback(() => {\r\n    const speedFactor = 30\r\n    function animateLine(timestamp?: number) {\r\n      if (resetTime.current) {\r\n        startTime.current = performance.now() - progress.current\r\n        resetTime.current = false\r\n      } else {\r\n        progress.current = timestamp - startTime.current\r\n      }\r\n      if (progress.current > speedFactor * 360) {\r\n        startTime.current = timestamp\r\n        dataRef.current = []\r\n      } else {\r\n        var x = progress.current / speedFactor\r\n        var y = Math.sin((x * Math.PI) / 90) * 40\r\n        dataRef.current.push([x, y])\r\n        setData([...dataRef.current])\r\n      }\r\n      animation.current = requestAnimationFrame(animateLine)\r\n    }\r\n    animateLine()\r\n  }, [])\r\n  const onClick = useCallback(() => {\r\n    if (animation.current) {\r\n      cancelAnimationFrame(animation.current)\r\n      animation.current = null\r\n    } else {\r\n      resetTime.current = true\r\n      animate()\r\n    }\r\n  }, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n        mapRef.current = map\r\n      }}\r\n      onLoad={() => {\r\n        startTime.current = performance.now()\r\n        animate()\r\n      }}\r\n      onClick={onClick}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/streets-v11\"\r\n      zoom={0.5}\r\n      center={[0, 0]}\r\n    >\r\n      <GeoJSONSource\r\n        id=\"line\"\r\n        option={{\r\n          data: {\r\n            type: 'FeatureCollection',\r\n            features: [\r\n              {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'LineString',\r\n                  coordinates: data\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"line-animation\"\r\n          source=\"line\"\r\n          type=\"line\"\r\n          paint={{\r\n            'line-color': '#ed6498',\r\n            'line-width': 5,\r\n            'line-opacity': 0.8\r\n          }}\r\n          layout={{\r\n            'line-cap': 'round',\r\n            'line-join': 'round'\r\n          }}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Animate a line by updating a GeoJSON source on each frame.",sanbox:"https://codesandbox.io/s/xiandonghua-5ljy5"},{name:"\u4e09\u7ef4\u5ba4\u5185",key:"indoor3D",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport React, { useRef } from 'react'\r\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n        mapRef.current = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/streets-v11\"\r\n      zoom={16}\r\n      center={[-87.61694, 41.86625]}\r\n      pitch={40}\r\n      bearing={20}\r\n      antialias={true}\r\n    >\r\n      <GeoJSONSource\r\n        id=\"floorplan\"\r\n        option={{\r\n          data:\r\n            'https://docs.mapbox.com/mapbox-gl-js/assets/indoor-3d-map.geojson'\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"room-extrusion\"\r\n          type=\"fill-extrusion\"\r\n          source=\"floorplan\"\r\n          paint={{\r\n            'fill-extrusion-color': ['get', 'color'],\r\n            'fill-extrusion-height': ['get', 'height'],\r\n            'fill-extrusion-base': ['get', 'base_height'],\r\n            'fill-extrusion-opacity': 0.5\r\n          }}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Create a 3D indoor map with the fill-extrude-height paint property.",sanbox:"https://codesandbox.io/s/sanweishinei-82gtg"},{name:"HTML\u6807\u6ce8\u805a\u5408",key:"clusters",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport React, { useCallback, useRef, useState } from 'react'\r\nimport { GeoJSONSource, Layer, Map, Marker } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  const mag1 = ['<', ['get', 'mag'], 2]\r\n  const mag2 = ['all', ['>=', ['get', 'mag'], 2], ['<', ['get', 'mag'], 3]]\r\n  const mag3 = ['all', ['>=', ['get', 'mag'], 3], ['<', ['get', 'mag'], 4]]\r\n  const mag4 = ['all', ['>=', ['get', 'mag'], 4], ['<', ['get', 'mag'], 5]]\r\n  const mag5 = ['>=', ['get', 'mag'], 5]\r\n  const colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c']\r\n\r\n  let markers = useRef({}).current\r\n  let [markersOnScreen, setMarkersOnScreen] = useState({})\r\n\r\n  const updateMarkers = useCallback(() => {\r\n    {\r\n      let newMarkers = {}\r\n      let features = mapRef.current.querySourceFeatures('earthquakes')\r\n      for (let i = 0; i < features.length; i++) {\r\n        let coords = features[i].geometry['coordinates']\r\n        let props = features[i].properties\r\n        if (!props.cluster) continue\r\n        let id = props.cluster_id\r\n        let marker = markers[id]\r\n        if (!marker) {\r\n          let el = createDonutChart(props)\r\n          marker = markers[id] = {\r\n            positon: coords,\r\n            children: el\r\n          }\r\n        }\r\n        newMarkers[id] = marker\r\n      }\r\n\r\n      setMarkersOnScreen(newMarkers)\r\n    }\r\n  }, [])\r\n  const createDonutChart = useCallback((props) => {\r\n    {\r\n      let offsets = []\r\n      let counts = [props.mag1, props.mag2, props.mag3, props.mag4, props.mag5]\r\n      let total = 0\r\n      for (let i = 0; i < counts.length; i++) {\r\n        offsets.push(total)\r\n        total += counts[i]\r\n      }\r\n      let fontSize =\r\n        total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16\r\n      let r = total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18\r\n      let r0 = Math.round(r * 0.6)\r\n      let w = r * 2\r\n      let html =\r\n        '<svg width=\"' +\r\n        w +\r\n        '\" height=\"' +\r\n        w +\r\n        '\" viewbox=\"0 0 ' +\r\n        w +\r\n        ' ' +\r\n        w +\r\n        '\" text-anchor=\"middle\" style=\"font: ' +\r\n        fontSize +\r\n        'px sans-serif\">'\r\n\r\n      for (let i = 0; i < counts.length; i++) {\r\n        html += donutSegment(\r\n          offsets[i] / total,\r\n          (offsets[i] + counts[i]) / total,\r\n          r,\r\n          r0,\r\n          colors[i]\r\n        )\r\n      }\r\n      html +=\r\n        '<circle cx=\"' +\r\n        r +\r\n        '\" cy=\"' +\r\n        r +\r\n        '\" r=\"' +\r\n        r0 +\r\n        '\" fill=\"white\" /><text dominant-baseline=\"central\" transform=\"translate(' +\r\n        r +\r\n        ', ' +\r\n        r +\r\n        ')\">' +\r\n        total.toLocaleString() +\r\n        '</text></svg>'\r\n      return html\r\n    }\r\n  }, [])\r\n\r\n  const donutSegment = useCallback((start, end, r, r0, color) => {\r\n    if (end - start === 1) end -= 0.00001\r\n    let a0 = 2 * Math.PI * (start - 0.25)\r\n    let a1 = 2 * Math.PI * (end - 0.25)\r\n    let x0 = Math.cos(a0),\r\n      y0 = Math.sin(a0)\r\n    let x1 = Math.cos(a1),\r\n      y1 = Math.sin(a1)\r\n    let largeArc = end - start > 0.5 ? 1 : 0\r\n    return [\r\n      '<path d=\"M',\r\n      r + r0 * x0,\r\n      r + r0 * y0,\r\n      'L',\r\n      r + r * x0,\r\n      r + r * y0,\r\n      'A',\r\n      r,\r\n      r,\r\n      0,\r\n      largeArc,\r\n      1,\r\n      r + r * x1,\r\n      r + r * y1,\r\n      'L',\r\n      r + r0 * x1,\r\n      r + r0 * y1,\r\n      'A',\r\n      r0,\r\n      r0,\r\n      0,\r\n      largeArc,\r\n      0,\r\n      r + r0 * x0,\r\n      r + r0 * y0,\r\n      '\" fill=\"' + color + '\" />'\r\n    ].join(' ')\r\n  }, [])\r\n\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n        mapRef.current = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/dark-v9\"\r\n      zoom={2}\r\n      center={[0, 0]}\r\n      onData={updateMarkers}\r\n      onMove={updateMarkers}\r\n      onMoveEnd={updateMarkers}\r\n      workercount={32}\r\n    >\r\n      {Object.keys(markersOnScreen).map((key) => {\r\n        return (\r\n          <Marker key={key} positon={markersOnScreen[key].positon}>\r\n            <div\r\n              dangerouslySetInnerHTML={{\r\n                __html: markersOnScreen[key].children\r\n              }}\r\n            />\r\n          </Marker>\r\n        )\r\n      })}\r\n      <GeoJSONSource\r\n        id=\"earthquakes\"\r\n        option={{\r\n          data:\r\n            'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\r\n          cluster: true,\r\n          clusterRadius: 80,\r\n          clusterProperties: {\r\n            mag1: ['+', ['case', mag1, 1, 0]],\r\n            mag2: ['+', ['case', mag2, 1, 0]],\r\n            mag3: ['+', ['case', mag3, 1, 0]],\r\n            mag4: ['+', ['case', mag4, 1, 0]],\r\n            mag5: ['+', ['case', mag5, 1, 0]]\r\n          }\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"earthquake_circle\"\r\n          source=\"earthquakes\"\r\n          type=\"circle\"\r\n          paint={{\r\n            'circle-color': [\r\n              'case',\r\n              mag1,\r\n              colors[0],\r\n              mag2,\r\n              colors[1],\r\n              mag3,\r\n              colors[2],\r\n              mag4,\r\n              colors[3],\r\n              colors[4]\r\n            ],\r\n            'circle-opacity': 0.6,\r\n            'circle-radius': 12\r\n          }}\r\n          filter={['!=', 'cluster', true]}\r\n        />\r\n        <Layer\r\n          id=\"earthquake_label\"\r\n          type=\"symbol\"\r\n          source=\"earthquakes\"\r\n          filter={['!=', 'cluster', true]}\r\n          layout={{\r\n            'text-field': [\r\n              'number-format',\r\n              ['get', 'mag'],\r\n              { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\r\n            ],\r\n            'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n            'text-size': 10\r\n          }}\r\n          paint={{\r\n            'text-color': ['case', ['<', ['get', 'mag'], 3], 'black', 'white']\r\n          }}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Display HTML clusters with custom properties",sanbox:"https://codesandbox.io/s/htmljuhe-72q9z"},{name:"Style\u6807\u6ce8\u805a\u5408",key:"styleClusters",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport mapboxgl, { LngLatLike } from 'mapbox-gl'\r\nimport React, { useCallback, useRef, useState } from 'react'\r\nimport { GeoJSONSource, Layer, Map, Popup } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  const sourceRef = useRef<mapboxgl.GeoJSONSource>()\r\n  const [popConf, setPopConf] = useState({\r\n    positon: [0, 0] as LngLatLike,\r\n    children: null,\r\n    hidden: true\r\n  })\r\n  const clustersOnClick = useCallback((e) => {\r\n    var features = mapRef.current.queryRenderedFeatures(e.point, {\r\n      layers: ['clusters']\r\n    })\r\n    var clusterId = features[0].properties.cluster_id\r\n    sourceRef.current.getClusterExpansionZoom(clusterId, (err, zoom) => {\r\n      if (err) return\r\n      mapRef.current.easeTo({\r\n        center: features[0].geometry['coordinates'],\r\n        zoom: zoom\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  const unclusteredOnClick = useCallback((e) => {\r\n    let coordinates = e.features[0].geometry.coordinates.slice()\r\n    let mag = e.features[0].properties.mag\r\n    let tsunami\r\n    if (e.features[0].properties.tsunami === 1) {\r\n      tsunami = 'yes'\r\n    } else {\r\n      tsunami = 'no'\r\n    }\r\n    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n      coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360\r\n    }\r\n    setPopConf({\r\n      positon: coordinates,\r\n      children: 'magnitude: ' + mag + '<br>Was there a tsunami?: ' + tsunami,\r\n      hidden: false\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n        mapRef.current = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/dark-v10\"\r\n      zoom={3}\r\n      center={[-103.59179687498357, 40.66995747013945]}\r\n    >\r\n      <Popup\r\n        positon={popConf.positon}\r\n        hidden={popConf.hidden}\r\n        closeButton={false}\r\n        closeOnMove={true}\r\n      >\r\n        <div dangerouslySetInnerHTML={{ __html: popConf.children }} />\r\n      </Popup>\r\n      <GeoJSONSource\r\n        ref={sourceRef}\r\n        id=\"earthquakes\"\r\n        option={{\r\n          data:\r\n            'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\r\n          cluster: true,\r\n          clusterRadius: 50,\r\n          clusterMaxZoom: 14\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"clusters\"\r\n          source=\"earthquakes\"\r\n          type=\"circle\"\r\n          paint={{\r\n            'circle-color': [\r\n              'step',\r\n              ['get', 'point_count'],\r\n              '#51bbd6',\r\n              100,\r\n              '#f1f075',\r\n              750,\r\n              '#f28cb1'\r\n            ],\r\n            'circle-radius': [\r\n              'step',\r\n              ['get', 'point_count'],\r\n              20,\r\n              100,\r\n              30,\r\n              750,\r\n              40\r\n            ]\r\n          }}\r\n          filter={['has', 'point_count']}\r\n          onClick={clustersOnClick}\r\n        />\r\n        <Layer\r\n          id=\"cluster-count\"\r\n          type=\"symbol\"\r\n          source=\"earthquakes\"\r\n          filter={['has', 'point_count']}\r\n          layout={{\r\n            'text-field': '{point_count_abbreviated}',\r\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n            'text-size': 12\r\n          }}\r\n        />\r\n        <Layer\r\n          id=\"unclustered-point\"\r\n          type=\"circle\"\r\n          source=\"earthquakes\"\r\n          filter={['!', ['has', 'point_count']]}\r\n          paint={{\r\n            'circle-color': '#11b4da',\r\n            'circle-radius': 4,\r\n            'circle-stroke-width': 1,\r\n            'circle-stroke-color': '#fff'\r\n          }}\r\n          onClick={unclusteredOnClick}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Use Mapbox GL JS built-in functions to visualize points as clusters.",sanbox:"https://codesandbox.io/s/stylejuhe-sxu7z"},{name:"\u4e09\u7ef4\u5efa\u7b51",key:"buildings3D",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useRef } from 'react'\r\nimport { Layer, Map } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        mapRef.current = map\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/light-v10\"\r\n      zoom={15}\r\n      center={[-74.0066, 40.7135]}\r\n      workercount={16}\r\n      pitch={45}\r\n      bearing={-17.6}\r\n    >\r\n      <Layer\r\n        id=\"3d-buildings\"\r\n        source=\"composite\"\r\n        sourceLayer=\"building\"\r\n        filter={['==', 'extrude', 'true']}\r\n        type=\"fill-extrusion\"\r\n        minzoom={15}\r\n        paint={{\r\n          'fill-extrusion-color': '#aaa',\r\n          'fill-extrusion-height': {\r\n            type: 'identity',\r\n            property: 'height'\r\n          },\r\n          'fill-extrusion-base': {\r\n            type: 'identity',\r\n            property: 'min_height'\r\n          },\r\n          'fill-extrusion-opacity': 0.6\r\n        }}\r\n      />\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Use extrusions to display buildings height in 3D.",sanbox:"https://codesandbox.io/s/3djianzhu-1tyyn"},{name:"\u5927\u6570\u636e\u6e32\u67d3",key:"bigDataCircles",code:"import React, { useRef, useEffect } from 'react'\r\nimport { Map, VectorSource, Layer } from 'react-mapbox-ts'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  useEffect(() => {}, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n      center={[-122.447303, 37.753574]}\r\n      zoom={12}\r\n      workercount={100}\r\n    >\r\n      <VectorSource\r\n        id=\"ethnicity\"\r\n        option={{\r\n          url: 'mapbox://examples.8fgz4egr'\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"population\"\r\n          type=\"circle\"\r\n          source=\"ethnicity\"\r\n          sourceLayer=\"sf2010\"\r\n          paint={{\r\n            'circle-radius': {\r\n              base: 1.75,\r\n              stops: [\r\n                [12, 2],\r\n                [22, 180]\r\n              ]\r\n            },\r\n            'circle-color': [\r\n              'match',\r\n              ['get', 'ethnicity'],\r\n              'White',\r\n              '#fbb03b',\r\n              'Black',\r\n              '#223b53',\r\n              'Hispanic',\r\n              '#e55e5e',\r\n              'Asian',\r\n              '#3bb2d0',\r\n              '#ccc'\r\n            ]\r\n          }}\r\n        />\r\n      </VectorSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Creating a visualization with a data expression for circle-color.",sanbox:"https://codesandbox.io/s/dashujujuhe-hsvdw"},{name:"\u70ed\u529b\u56fe",key:"heatmap",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useEffect, useRef } from 'react'\r\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  useEffect(() => {}, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/dark-v10\"\r\n      center={[-120, 50]}\r\n      zoom={2}\r\n      workercount={100}\r\n    >\r\n      <GeoJSONSource\r\n        id=\"earthquakes\"\r\n        option={{\r\n          data:\r\n            'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson'\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"earthquakes-heat\"\r\n          type=\"heatmap\"\r\n          source=\"earthquakes\"\r\n          maxzoom={9}\r\n          paint={{\r\n            'heatmap-weight': [\r\n              'interpolate',\r\n              ['linear'],\r\n              ['get', 'mag'],\r\n              0,\r\n              0,\r\n              6,\r\n              1\r\n            ],\r\n            // Increase the heatmap color weight weight by zoom level\r\n            // heatmap-intensity is a multiplier on top of heatmap-weight\r\n            'heatmap-intensity': [\r\n              'interpolate',\r\n              ['linear'],\r\n              ['zoom'],\r\n              0,\r\n              1,\r\n              9,\r\n              3\r\n            ],\r\n            // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\r\n            // Begin color ramp at 0-stop with a 0-transparancy color\r\n            // to create a blur-like effect.\r\n            'heatmap-color': [\r\n              'interpolate',\r\n              ['linear'],\r\n              ['heatmap-density'],\r\n              0,\r\n              'rgba(33,102,172,0)',\r\n              0.2,\r\n              'rgb(103,169,207)',\r\n              0.4,\r\n              'rgb(209,229,240)',\r\n              0.6,\r\n              'rgb(253,219,199)',\r\n              0.8,\r\n              'rgb(239,138,98)',\r\n              1,\r\n              'rgb(178,24,43)'\r\n            ],\r\n            // Adjust the heatmap radius by zoom level\r\n            'heatmap-radius': [\r\n              'interpolate',\r\n              ['linear'],\r\n              ['zoom'],\r\n              0,\r\n              2,\r\n              9,\r\n              20\r\n            ],\r\n            // Transition from heatmap to circle layer by zoom level\r\n            'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0]\r\n          }}\r\n          before=\"waterway-label\"\r\n        />\r\n        <Layer\r\n          id=\"earthquakes-point\"\r\n          type=\"circle\"\r\n          source=\"earthquakes\"\r\n          minzoom={7}\r\n          paint={{\r\n            'circle-radius': [\r\n              'interpolate',\r\n              ['linear'],\r\n              ['zoom'],\r\n              7,\r\n              ['interpolate', ['linear'], ['get', 'mag'], 1, 1, 6, 4],\r\n              16,\r\n              ['interpolate', ['linear'], ['get', 'mag'], 1, 5, 6, 50]\r\n            ],\r\n            // Color circle by earthquake magnitude\r\n            'circle-color': [\r\n              'interpolate',\r\n              ['linear'],\r\n              ['get', 'mag'],\r\n              1,\r\n              'rgba(33,102,172,0)',\r\n              2,\r\n              'rgb(103,169,207)',\r\n              3,\r\n              'rgb(209,229,240)',\r\n              4,\r\n              'rgb(253,219,199)',\r\n              5,\r\n              'rgb(239,138,98)',\r\n              6,\r\n              'rgb(178,24,43)'\r\n            ],\r\n            'circle-stroke-color': 'white',\r\n            'circle-stroke-width': 1,\r\n            // Transition from heatmap to circle layer by zoom level\r\n            'circle-opacity': ['interpolate', ['linear'], ['zoom'], 7, 0, 8, 1]\r\n          }}\r\n          before=\"waterway-label\"\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Visualize earthquake frequency by location using a heatmap layer.",sanbox:"https://codesandbox.io/s/relitu-ouqvc"},{name:"\u5730\u5f62\u9634\u5f71",key:"hillshading",code:'import React, { useRef, useEffect } from \'react\'\r\nimport { Map, Layer } from \'react-mapbox-ts\'\r\nimport mapboxConf from \'@/assets/mapbox.conf\'\r\nimport { ResterDemSource } from \'react-mapbox-ts\'\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  useEffect(() => {}, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style="mapbox://styles/mapbox/cjaudgl840gn32rnrepcb9b9g"\r\n      center={[-119.5591, 37.715]}\r\n      zoom={9}\r\n      workercount={100}\r\n    >\r\n      <ResterDemSource\r\n        id="dem"\r\n        option={{\r\n          url: \'mapbox://mapbox.terrain-rgb\'\r\n        }}\r\n      >\r\n        <Layer\r\n          id="hillshading"\r\n          source="dem"\r\n          type="hillshade"\r\n          before="waterway-river-canal-shadow"\r\n        />\r\n      </ResterDemSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n',des:"Adds raster hillshading to a map.",sanbox:"https://codesandbox.io/s/dixingyinying-pqjlw"},{name:"\u6e10\u53d8\u7ebf",key:"gradientLine",code:"import React, { useRef, useEffect } from 'react'\r\nimport { Map, GeoJSONSource, Layer } from 'react-mapbox-ts'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const geojson: any = {\r\n    type: 'FeatureCollection',\r\n    features: [\r\n      {\r\n        type: 'Feature',\r\n        properties: {},\r\n        geometry: {\r\n          coordinates: [\r\n            [-77.044211, 38.852924],\r\n            [-77.045659, 38.860158],\r\n            [-77.044232, 38.862326],\r\n            [-77.040879, 38.865454],\r\n            [-77.039936, 38.867698],\r\n            [-77.040338, 38.86943],\r\n            [-77.04264, 38.872528],\r\n            [-77.03696, 38.878424],\r\n            [-77.032309, 38.87937],\r\n            [-77.030056, 38.880945],\r\n            [-77.027645, 38.881779],\r\n            [-77.026946, 38.882645],\r\n            [-77.026942, 38.885502],\r\n            [-77.028054, 38.887449],\r\n            [-77.02806, 38.892088],\r\n            [-77.03364, 38.892108],\r\n            [-77.033643, 38.899926]\r\n          ],\r\n          type: 'LineString'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n      center={[-77.035, 38.875]}\r\n      zoom={12}\r\n      workercount={100}\r\n    >\r\n      <GeoJSONSource\r\n        id=\"line\"\r\n        option={{\r\n          lineMetrics: true,\r\n          data: geojson\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"line\"\r\n          source=\"line\"\r\n          type=\"line\"\r\n          paint={{\r\n            'line-color': 'red',\r\n            'line-width': 14,\r\n            'line-gradient': [\r\n              'interpolate',\r\n              ['linear'],\r\n              ['line-progress'],\r\n              0,\r\n              'blue',\r\n              0.1,\r\n              'royalblue',\r\n              0.3,\r\n              'cyan',\r\n              0.5,\r\n              'lime',\r\n              0.7,\r\n              'yellow',\r\n              1,\r\n              'red'\r\n            ]\r\n          }}\r\n          layout={{\r\n            'line-cap': 'round',\r\n            'line-join': 'round'\r\n          }}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Use the line-gradient paint property and an expression to visualize distance from the starting point of a line."},{name:"\u591a\u56fe\u5c42\u53e0\u52a0",key:"multipleGeometries",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const [style, setStyle] = useState('dark-v10')\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setStyle('satellite-v9')\r\n    }, 5000)\r\n    setTimeout(() => {\r\n      setStyle('streets-v11')\r\n    }, 10000)\r\n    return () => {}\r\n  }, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={`mapbox://styles/mapbox/${style}`}\r\n      center={[-121.415061, 40.506229]}\r\n      zoom={mapboxConf.zoom}\r\n      workercount={50}\r\n    >\r\n      <GeoJSONSource\r\n        id=\"national-park\"\r\n        option={{\r\n          data: {\r\n            type: 'FeatureCollection',\r\n            features: [\r\n              {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Polygon',\r\n                  coordinates: [\r\n                    [\r\n                      [-121.353637, 40.584978],\r\n                      [-121.284551, 40.584758],\r\n                      [-121.275349, 40.541646],\r\n                      [-121.246768, 40.541017],\r\n                      [-121.251343, 40.423383],\r\n                      [-121.32687, 40.423768],\r\n                      [-121.360619, 40.43479],\r\n                      [-121.363694, 40.409124],\r\n                      [-121.439713, 40.409197],\r\n                      [-121.439711, 40.423791],\r\n                      [-121.572133, 40.423548],\r\n                      [-121.577415, 40.550766],\r\n                      [-121.539486, 40.558107],\r\n                      [-121.520284, 40.572459],\r\n                      [-121.487219, 40.550822],\r\n                      [-121.446951, 40.56319],\r\n                      [-121.370644, 40.563267],\r\n                      [-121.353637, 40.584978]\r\n                    ]\r\n                  ]\r\n                }\r\n              },\r\n              {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: [-121.415061, 40.506229]\r\n                }\r\n              },\r\n              {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: [-121.505184, 40.488084]\r\n                }\r\n              },\r\n              {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: [-121.354465, 40.488737]\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"park-boundary\"\r\n          type=\"fill\"\r\n          source=\"national-park\"\r\n          paint={{\r\n            'fill-color': '#888888',\r\n            'fill-opacity': 0.4\r\n          }}\r\n          filter={['==', '$type', 'Polygon']}\r\n        />\r\n        {style === 'streets-v11' ? (\r\n          <Layer\r\n            id=\"park-volcanoes\"\r\n            type=\"circle\"\r\n            source=\"national-park\"\r\n            paint={{\r\n              'circle-radius': 6,\r\n              'circle-color': '#B42222'\r\n            }}\r\n            filter={['==', '$type', 'Point']}\r\n          />\r\n        ) : null}\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Add a polygon and circle layer from the same GeoJSON source.",sanbox:"https://codesandbox.io/s/duotuceng-te0wh"},{name:"\u52a8\u6001\u5b9e\u65f6\u6570\u636e",key:"realtime",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport { LngLatLike } from 'mapbox-gl'\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\r\n\r\ninterface DataParams {\r\n  data: any\r\n  size: number\r\n  center: LngLatLike\r\n}\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const url = 'https://wanderdrone.appspot.com/'\r\n  const [data, setData] = useState<DataParams>({\r\n    data: null,\r\n    size: 1,\r\n    center: [-114.36500971520232, -8.13046865403699]\r\n  })\r\n  const intRef = useRef<NodeJS.Timeout>()\r\n  const sourceRef = useRef<mapboxgl.GeoJSONSource>()\r\n  const layerRef = useRef<mapboxgl.Layer>()\r\n  useEffect(() => {\r\n    intRef.current = setInterval(WsetInterval, 3000)\r\n    return () => {\r\n      clearInterval(intRef.current)\r\n    }\r\n  }, [])\r\n  const WsetInterval = useCallback(() => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setData({\r\n          data: data,\r\n          center: data.geometry.coordinates,\r\n          size: Math.random() * 10 + 1\r\n        })\r\n      })\r\n  }, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      flyToOptions={{ speed: 0.8 }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n      center={data.center}\r\n      zoom={4}\r\n      workercount={16}\r\n    >\r\n      <GeoJSONSource\r\n        ref={sourceRef}\r\n        id=\"drone\"\r\n        option={{ data: data.data || url }}\r\n      >\r\n        <Layer\r\n          ref={layerRef}\r\n          id=\"layer-id\"\r\n          type=\"symbol\"\r\n          source=\"drone\"\r\n          layout={{\r\n            'icon-image': 'rocket-15',\r\n            'icon-size': data.size\r\n          }}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Use realtime GeoJSON data streams to move a symbol on your map.",sanbox:"https://codesandbox.io/s/dongtaishuaxin-pnx4h"}]},sources:{title:"\u6e90",items:[{name:"\u77e2\u91cf\u5e73\u94fa\u6e90",key:"vectortile",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useRef, useState, useEffect } from 'react'\r\nimport { Map, VectorSource, Layer } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const [zoom, setZoom] = useState(13)\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setZoom(9)\r\n    }, 5000)\r\n  })\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/light-v10\"\r\n      zoom={11}\r\n      center={[-122.447303, 37.753574]}\r\n      workercount={16}\r\n      minZoom={10}\r\n    >\r\n      <VectorSource\r\n        id=\"mapbox-terrain\"\r\n        option={{\r\n          url: 'mapbox://mapbox.mapbox-terrain-v2',\r\n          minzoom: zoom\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"terrain-data\"\r\n          type=\"line\"\r\n          source=\"mapbox-terrain\"\r\n          sourceLayer=\"contour\"\r\n          layout={{\r\n            'line-join': 'round',\r\n            'line-cap': 'round'\r\n          }}\r\n          paint={{\r\n            'line-color': '#ff69b4',\r\n            'line-width': 1\r\n          }}\r\n        />\r\n      </VectorSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Add a vector source to a map.",sanbox:"https://codesandbox.io/s/vectorsource-lioqj"},{name:"\u753b\u5e03\u6e90",key:"canvas",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { CanvasSource, Layer, Map } from 'react-mapbox-ts'\r\n\r\nclass Circle {\r\n  constructor(\r\n    x: number,\r\n    y: number,\r\n    dx: number,\r\n    dy: number,\r\n    radius: number,\r\n    color: string,\r\n    ctx: CanvasRenderingContext2D\r\n  ) {\r\n    this.x = x\r\n    this.y = y\r\n    this.dx = dx\r\n    this.dy = dy\r\n    this.radius = radius\r\n    this.color = color\r\n    this.ctx = ctx\r\n  }\r\n  x: number = 0\r\n  y: number = 0\r\n  dx: number = 0\r\n  dy: number = 0\r\n  radius: number = 0\r\n  color: string = ''\r\n  ctx: CanvasRenderingContext2D\r\n  draw() {\r\n    this.ctx.beginPath()\r\n    this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n    this.ctx.strokeStyle = this.color\r\n    this.ctx.stroke()\r\n  }\r\n  update() {\r\n    if (this.x + this.radius > 400 || this.x - this.radius < 0) {\r\n      this.dx = -this.dx\r\n    }\r\n    if (this.y + this.radius > 400 || this.y - this.radius < 0) {\r\n      this.dy = -this.dy\r\n    }\r\n    this.x += this.dx\r\n    this.y += this.dy\r\n    this.draw()\r\n  }\r\n}\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const [canvas, setCanvas] = useState<HTMLCanvasElement>()\r\n  const canvasAnimate = useCallback(() => {\r\n    const ctx = canvas.getContext('2d')\r\n    const circles: Circle[] = []\r\n    const radius = 20\r\n    for (let i = 0; i < 5; i++) {\r\n      let color =\r\n        '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6)\r\n      let x = Math.random() * (400 - radius * 2) + radius\r\n      let y = Math.random() * (400 - radius * 2) + radius\r\n      let dx = (Math.random() - 0.5) * 2\r\n      let dy = (Math.random() - 0.5) * 2\r\n      circles.push(new Circle(x, y, dx, dy, radius, color, ctx))\r\n    }\r\n    function animate() {\r\n      requestAnimationFrame(animate)\r\n      ctx.clearRect(0, 0, 400, 400)\r\n      for (var r = 0; r < 5; r++) {\r\n        circles[r].update()\r\n      }\r\n    }\r\n    animate()\r\n  }, [canvas])\r\n  useEffect(() => {\r\n    canvas && canvasAnimate()\r\n  }, [canvas])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/light-v10\"\r\n      zoom={5}\r\n      center={[95.899147, 18.088694]}\r\n      workercount={16}\r\n      minZoom={4}\r\n    >\r\n      <CanvasSource\r\n        ref={(e) => {\r\n          setCanvas(e.canvas)\r\n        }}\r\n        id=\"canvas-source\"\r\n        option={{\r\n          coordinates: [\r\n            [91.4461, 21.5006],\r\n            [100.3541, 21.5006],\r\n            [100.3541, 13.9706],\r\n            [91.4461, 13.9706]\r\n          ],\r\n          animate: true\r\n        }}\r\n      >\r\n        <Layer id=\"canvas-layer\" type=\"raster\" source=\"canvas-source\" />\r\n      </CanvasSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Add a canvas source to the map.",sanbox:"https://codesandbox.io/s/canvassource-0qkyo"},{name:"\u56fe\u7247\u6e90",key:"image",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useRef } from 'react'\r\nimport { ImageSource, Layer, Map, VectorSource } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        mapRef.current = map\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={{\r\n        version: 8,\r\n        sprite: 'mapbox://sprites/mapbox/dark-v10',\r\n        glyphs: 'mapbox://fonts/mapbox/{fontstack}/{range}.pbf',\r\n        sources: {},\r\n        layers: []\r\n      }}\r\n      zoom={5}\r\n      maxZoom={6}\r\n      minZoom={4}\r\n      center={[-75.789, 41.874]}\r\n      workercount={16}\r\n    >\r\n      <Layer\r\n        id=\"background\"\r\n        type=\"background\"\r\n        paint={{\r\n          'background-color': '#111'\r\n        }}\r\n      />\r\n      <ImageSource\r\n        id=\"overlay\"\r\n        option={{\r\n          url: 'https://docs.mapbox.com/mapbox-gl-js/assets/radar.gif',\r\n          coordinates: [\r\n            [-80.425, 46.437],\r\n            [-71.516, 46.437],\r\n            [-71.516, 37.936],\r\n            [-80.425, 37.936]\r\n          ]\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"overlay\"\r\n          source=\"overlay\"\r\n          type=\"raster\"\r\n          paint={{\r\n            'raster-opacity': 0.85\r\n          }}\r\n        />\r\n      </ImageSource>\r\n      <VectorSource\r\n        id=\"mapbox\"\r\n        option={{ url: 'mapbox://mapbox.mapbox-streets-v8' }}\r\n      >\r\n        <Layer\r\n          id=\"water\"\r\n          source=\"mapbox\"\r\n          sourceLayer=\"water\"\r\n          type=\"fill\"\r\n          paint={{\r\n            'fill-color': '#2c2c2c'\r\n          }}\r\n        />\r\n        <Layer\r\n          id=\"boundaries\"\r\n          source=\"mapbox\"\r\n          sourceLayer=\"admin\"\r\n          type=\"line\"\r\n          paint={{\r\n            'line-color': '#797979',\r\n            'line-dasharray': [2, 2, 6, 2]\r\n          }}\r\n          filter={['all', ['==', 'maritime', 0]]}\r\n        />\r\n        <Layer\r\n          id=\"cities\"\r\n          source=\"mapbox\"\r\n          sourceLayer=\"place_label\"\r\n          type=\"symbol\"\r\n          paint={{\r\n            'text-color': '#969696',\r\n            'text-halo-width': 2,\r\n            'text-halo-color': 'rgba(0, 0, 0, 0.85)'\r\n          }}\r\n          layout={{\r\n            'text-field': '{name_en}',\r\n            'text-font': ['DIN Offc Pro Bold', 'Arial Unicode MS Bold'],\r\n            'text-size': ['interpolate', ['linear'], ['zoom'], 4, 9, 6, 12]\r\n          }}\r\n        />\r\n        <Layer\r\n          id=\"states\"\r\n          source=\"mapbox\"\r\n          sourceLayer=\"place_label\"\r\n          type=\"symbol\"\r\n          paint={{\r\n            'text-color': '#969696',\r\n            'text-halo-width': 2,\r\n            'text-halo-color': 'rgba(0, 0, 0, 0.85)'\r\n          }}\r\n          layout={{\r\n            'text-transform': 'uppercase',\r\n            'text-field': '{name_en}',\r\n            'text-font': ['DIN Offc Pro Bold', 'Arial Unicode MS Bold'],\r\n            'text-letter-spacing': 0.15,\r\n            'text-max-width': 7,\r\n            'text-size': ['interpolate', ['linear'], ['zoom'], 4, 10, 6, 14]\r\n          }}\r\n          filter={['==', ['get', 'class'], 'state']}\r\n        />\r\n      </VectorSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Dark vector baselayer with radar weather image overlay.",sanbox:"https://codesandbox.io/s/imagesources-se7l1"},{name:"\u89c6\u9891\u6e90",key:"video",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useRef, useCallback } from 'react'\r\nimport { Layer, Map, VideoSource, VideoSourcePlus } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const videoRef = useRef<VideoSourcePlus>()\r\n  const playRef = useRef(true)\r\n  const videoClick = useCallback(() => {\r\n    if (playRef.current) {\r\n      videoRef.current.pause()\r\n    } else {\r\n      videoRef.current.play()\r\n    }\r\n    playRef.current = !playRef.current\r\n  }, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/satellite-v9\"\r\n      zoom={17}\r\n      center={[-122.514426, 37.562984]}\r\n      workercount={16}\r\n      bearing={-96}\r\n      minZoom={14}\r\n      onClick={videoClick}\r\n    >\r\n      <VideoSource\r\n        ref={(e) => {\r\n          videoRef.current = e\r\n        }}\r\n        id=\"video\"\r\n        option={{\r\n          urls: [\r\n            'https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4',\r\n            'https://static-assets.mapbox.com/mapbox-gl-js/drone.webm'\r\n          ],\r\n          coordinates: [\r\n            [-122.51596391201019, 37.56238816766053],\r\n            [-122.51467645168304, 37.56410183312965],\r\n            [-122.51309394836426, 37.563391708549425],\r\n            [-122.51423120498657, 37.56161849366671]\r\n          ]\r\n        }}\r\n      >\r\n        <Layer id=\"video\" type=\"raster\" source=\"video\" />\r\n      </VideoSource>\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Satellite raster baselayer with video on top. Click on the map to play and pause.",sanbox:"https://codesandbox.io/s/videosource-h6ji9"},{name:"WMS/WMTS\u6e90",key:"wmts",code:"import { Map, RasterSource, Layer } from 'react-mapbox-ts'\r\nimport { Radio } from 'antd'\r\nimport React, { useCallback, useState, useMemo } from 'react'\r\nimport { RadioChangeEvent } from 'antd/lib/radio'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nimport wmsData from '@/assets/wms.data'\r\n\r\nconst keys = Object.keys(wmsData)\r\nexport default () => {\r\n  const [index, setIndex] = useState(0)\r\n  const StyleChange = useCallback((e: RadioChangeEvent) => {\r\n    setIndex(e.target.value)\r\n  }, [])\r\n  const { name, ...config } = useMemo(() => wmsData[keys[index]], [index])\r\n  return (\r\n    <div className=\"full\">\r\n      <Map\r\n        // ref={mapRef}\r\n        ref={(map) => {\r\n          window.map = map\r\n        }}\r\n        accessToken={mapboxConf.accessToken}\r\n        style={{\r\n          version: 8,\r\n          sources: {},\r\n          layers: []\r\n        }}\r\n        center={mapboxConf.center}\r\n        zoom={mapboxConf.zoom}\r\n        maxZoom={config.maxzoom}\r\n        minZoom={config.minzoom}\r\n      >\r\n        <RasterSource\r\n          id=\"raster-tiles\"\r\n          option={{\r\n            tiles: config.tiles,\r\n            tileSize: config.tileSize || 256,\r\n            attribution: config.attribution || ''\r\n          }}\r\n        >\r\n          <Layer id=\"raster-layer\" source=\"raster-tiles\" type=\"raster\" />\r\n        </RasterSource>\r\n      </Map>\r\n      <div style={{ position: 'absolute', top: 0 }}>\r\n        <Radio.Group\r\n          defaultValue={0}\r\n          onChange={StyleChange}\r\n          buttonStyle=\"solid\"\r\n        >\r\n          {keys.map((item, index) => {\r\n            return (\r\n              <Radio.Button key={`${item}-btn`} value={index}>\r\n                {wmsData[item].name}\r\n              </Radio.Button>\r\n            )\r\n          })}\r\n        </Radio.Group>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",des:"Adding an external Web Map Service layer to the map.",sanbox:"https://codesandbox.io/s/rastersource-603n2"},{name:"\u5b9e\u65f6\u66f4\u65b0\u6e90",key:"realtimeUpdate",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\r\n\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const [data, setData] = useState<any>()\r\n  const allAata = useRef<any[]>()\r\n  const aniRef = useRef<NodeJS.Timeout>()\r\n\r\n  useEffect(() => {\r\n    if (!data) return\r\n    const sendData = { ...data }\r\n    aniRef.current = setTimeout(() => {\r\n      if (!!allAata.current[0]) {\r\n        sendData.features[0].geometry.coordinates.push(allAata.current[0])\r\n        setData(sendData)\r\n        mapRef.current.panTo(allAata.current[0])\r\n        allAata.current.shift()\r\n      } else {\r\n        clearInterval(aniRef.current)\r\n      }\r\n    }, 10)\r\n  }, [data])\r\n\r\n  useEffect(() => {\r\n    fetch('https://docs.mapbox.com/mapbox-gl-js/assets/hike.geojson')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        allAata.current = data.features[0].geometry.coordinates\r\n        data.features[0].geometry.coordinates = [allAata.current[0]]\r\n        setData(data)\r\n        mapRef.current\r\n          .jumpTo({ center: allAata.current[0], zoom: 14 })\r\n          .setPitch(30)\r\n      })\r\n    return () => {\r\n      clearInterval(aniRef.current)\r\n    }\r\n  }, [])\r\n  return (\r\n    <Map\r\n      // ref={mapRef}\r\n      ref={(map) => {\r\n        mapRef.current = map\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style=\"mapbox://styles/mapbox/satellite-v9\"\r\n      zoom={0}\r\n      center={[-122.514426, 37.562984]}\r\n      workercount={16}\r\n    >\r\n      {!!data && (\r\n        <GeoJSONSource\r\n          id=\"trace\"\r\n          option={{\r\n            data: data\r\n          }}\r\n        >\r\n          <Layer\r\n            id=\"trace\"\r\n            type=\"line\"\r\n            source=\"trace\"\r\n            paint={{\r\n              'line-color': 'yellow',\r\n              'line-opacity': 0.75,\r\n              'line-width': 5\r\n            }}\r\n          />\r\n        </GeoJSONSource>\r\n      )}\r\n    </Map>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Change an existing feature on your map in realtime by updating its data.",sanbox:"https://codesandbox.io/s/shishigengxinyuan-e11hb"}]},interaction:{title:"\u4ea4\u4e92",items:[{name:"\u81ea\u5b9a\u4e49\u52a8\u753b",key:"customizeAnimations",code:"import React, { useRef, useEffect, useState, useCallback } from 'react'\r\nimport { Map, GeoJSONSource, Layer } from 'react-mapbox-ts'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nimport { LngLatLike, AnimationOptions } from 'mapbox-gl'\r\nimport { Space, Select, Slider, Switch, Input, Typography, Button } from 'antd'\r\nconst { Option } = Select\r\nconst { Text } = Typography\r\nconst easingFunctions = {\r\n  easeInCubic: (t: number) => {\r\n    return t * t * t\r\n  },\r\n  easeOutQuint: (t: number) => {\r\n    return 1 - Math.pow(1 - t, 5)\r\n  },\r\n  easeInOutCirc: (t: number) => {\r\n    return t < 0.5\r\n      ? (1 - Math.sqrt(1 - Math.pow(2 * t, 2))) / 2\r\n      : (Math.sqrt(1 - Math.pow(-2 * t + 2, 2)) + 1) / 2\r\n  },\r\n  easeOutBounce: (t: number) => {\r\n    var n1 = 7.5625\r\n    var d1 = 2.75\r\n    if (t < 1 / d1) {\r\n      return n1 * t * t\r\n    } else if (t < 2 / d1) {\r\n      return n1 * (t -= 1.5 / d1) * t + 0.75\r\n    } else if (t < 2.5 / d1) {\r\n      return n1 * (t -= 2.25 / d1) * t + 0.9375\r\n    } else {\r\n      return n1 * (t -= 2.625 / d1) * t + 0.984375\r\n    }\r\n  }\r\n}\r\nconst Demo: React.FC = () => {\r\n  const mapRef = useRef<mapboxgl.Map>()\r\n  const [center, setCenter] = useState<LngLatLike>([-95, 40])\r\n  const [aniConf, setAniConf] = useState<AnimationOptions>({\r\n    duration: 1000,\r\n    easing: easingFunctions['easeInCubic'],\r\n    offset: [1, 1],\r\n    animate: true,\r\n    essential: true\r\n  })\r\n  useEffect(() => {}, [])\r\n  const changeConf = useCallback(\r\n    (key: string, value) => {\r\n      let newConfi = { ...aniConf }\r\n      newConfi[key] = value\r\n      setAniConf(newConfi)\r\n    },\r\n    [aniConf]\r\n  )\r\n  return (\r\n    <div className=\"full\">\r\n      <Map\r\n        // ref={mapRef}\r\n        ref={(map) => {\r\n          window.map = map\r\n        }}\r\n        accessToken={mapboxConf.accessToken}\r\n        style={mapboxConf.style}\r\n        center={center}\r\n        zoom={mapboxConf.zoom}\r\n        animationOptions={aniConf}\r\n        workercount={100}\r\n      >\r\n        <GeoJSONSource\r\n          id=\"center\"\r\n          option={{\r\n            data: {\r\n              type: 'Point',\r\n              coordinates: center\r\n            }\r\n          }}\r\n        >\r\n          <Layer\r\n            id=\"center\"\r\n            source=\"center\"\r\n            type=\"symbol\"\r\n            layout={{\r\n              'icon-image': 'marker-15',\r\n              'text-field': `Center: [${center[0].toFixed(\r\n                1\r\n              )},${center[1].toFixed(1)}]`,\r\n              'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n              'text-offset': [0, 0.6],\r\n              'text-anchor': 'top'\r\n            }}\r\n            paint={{\r\n              'text-color': 'red'\r\n            }}\r\n          />\r\n        </GeoJSONSource>\r\n      </Map>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          left: 8,\r\n          top: 8,\r\n          padding: 8,\r\n          background: '#fff'\r\n        }}\r\n      >\r\n        <Space direction=\"vertical\">\r\n          \u9009\u62e9\u52a8\u753b\u51fd\u6570\r\n          <Select\r\n            defaultValue=\"easeInCubic\"\r\n            onChange={(v) => {\r\n              changeConf('easing', easingFunctions[v])\r\n            }}\r\n            style={{ width: 150 }}\r\n            size=\"small\"\r\n          >\r\n            {Object.keys(easingFunctions).map((key) => (\r\n              <Option value={key} key={`easingFunctions-${key}`}>\r\n                {key}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n          \u8bbe\u7f6e\u52a8\u753b\u6301\u7eed\u65f6\u95f4(\u5355\u4f4d:\u79d2)\r\n          <Slider\r\n            defaultValue={1}\r\n            min={0}\r\n            max={10}\r\n            step={0.5}\r\n            onChange={(v) => {\r\n              changeConf('duration', Number(v) * 1000)\r\n            }}\r\n          />\r\n          \u76f8\u673a\u52a8\u753b\u5f00\u542f\r\n          <Switch\r\n            defaultChecked\r\n            size=\"small\"\r\n            onChange={(checked) => {\r\n              changeConf('animate', !!checked)\r\n            }}\r\n          />\r\n          <Input\r\n            addonBefore=\"Offset-X\"\r\n            type=\"number\"\r\n            defaultValue={1}\r\n            size=\"small\"\r\n            onChange={(e) => {\r\n              let newOffset = JSON.parse(JSON.stringify(aniConf.offset))\r\n              newOffset[0] = Number(e.target.value)\r\n              changeConf('offset', newOffset)\r\n            }}\r\n          />\r\n          <Input\r\n            addonBefore=\"Offset-Y\"\r\n            type=\"number\"\r\n            defaultValue={1}\r\n            size=\"small\"\r\n            onChange={(e) => {\r\n              let newOffset = JSON.parse(JSON.stringify(aniConf.offset))\r\n              newOffset[1] = Number(e.target.value)\r\n              changeConf('offset', newOffset)\r\n            }}\r\n          />\r\n          <Text code>\u504f\u79fb\u91cf\u53ef\u4ee5\u4e3a\u8d1f</Text>\r\n          <Button\r\n            type=\"primary\"\r\n            size=\"small\"\r\n            onClick={() => {\r\n              const center: LngLatLike = [\r\n                -95 + (Math.random() - 0.5) * 20,\r\n                40 + (Math.random() - 0.5) * 20\r\n              ]\r\n              setCenter(center)\r\n            }}\r\n          >\r\n            \u6d4b\u8bd5\u52a8\u753b\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Demo\r\n",des:"Customize camera animations using AnimationOptions."},{name:"\u70b9\u62d6\u52a8",key:"draggablePoint",code:"import React, { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { Map, GeoJSONSource, Layer } from 'react-mapbox-ts'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nimport { message } from 'antd'\r\nexport default () => {\r\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\r\n  const [data, setData] = useState({\r\n    type: 'FeatureCollection',\r\n    features: [\r\n      {\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [0, 0]\r\n        }\r\n      }\r\n    ]\r\n  })\r\n  const onMove = useCallback(\r\n    (e: mapboxgl.MapMouseEvent & mapboxgl.EventData) => {\r\n      let newData = { ...data }\r\n      newData.features[0].geometry.coordinates = [e.lngLat.lng, e.lngLat.lat]\r\n      setData(newData)\r\n    },\r\n    [data]\r\n  )\r\n  const onUp = useCallback(\r\n    (e: mapboxgl.MapMouseEvent & mapboxgl.EventData) => {\r\n      message.info(`Longitude: '${e.lngLat.lng}' Latitude: '${e.lngLat.lat}'`)\r\n      mapRef.current.off('mousemove', onMove)\r\n      mapRef.current.off('touchmove', onMove)\r\n    },\r\n    [data]\r\n  )\r\n  useEffect(() => {\r\n    return () => {\r\n      message.destroy()\r\n    }\r\n  }, [])\r\n  const bindEvent = useCallback(\r\n    (e: mapboxgl.MapLayerTouchEvent | mapboxgl.MapLayerMouseEvent) => {\r\n      if ('points' in e) {\r\n        if (e.points.length !== 1) return\r\n      }\r\n      e.preventDefault()\r\n      mapRef.current.on('mousemove', onMove)\r\n      mapRef.current.once('mouseup', onUp)\r\n    },\r\n    []\r\n  )\r\n  return (\r\n    <Map\r\n      ref={(map) => {\r\n        mapRef.current = map\r\n        window.map = map\r\n      }}\r\n      accessToken={mapboxConf.accessToken}\r\n      style={mapboxConf.style}\r\n      center={[0, 0]}\r\n      zoom={2}\r\n      onMouseMove={() => {}}\r\n      onMouseUp={() => {}}\r\n    >\r\n      <GeoJSONSource\r\n        id=\"point\"\r\n        option={{\r\n          data: data as any\r\n        }}\r\n      >\r\n        <Layer\r\n          id=\"point\"\r\n          source=\"point\"\r\n          type=\"circle\"\r\n          paint={{\r\n            'circle-radius': 10,\r\n            'circle-color': '#3887be'\r\n          }}\r\n          onMouseDown={bindEvent}\r\n          onTouchStart={bindEvent}\r\n        />\r\n      </GeoJSONSource>\r\n    </Map>\r\n  )\r\n}\r\n",des:"Customize camera animations using AnimationOptions.",sanbox:"https://codesandbox.io/s/keyidongdeicon-3m2r2"},{name:"\u8fc7\u6ee4\u6807\u8bc6",key:"filterSymbols",code:"import React, { useRef, useState, useCallback } from 'react'\r\nimport { Map, GeoJSONSource, Layer } from 'react-mapbox-ts'\r\nimport mapboxConf from '@/assets/mapbox.conf'\r\nimport { Input } from 'antd'\r\nexport default () => {\r\n  const mapRef = useRef()\r\n  const [key, setKey] = useState('')\r\n  const onChange = useCallback((e) => {\r\n    setKey(e.target.value)\r\n  }, [])\r\n  const places = {\r\n    type: 'FeatureCollection',\r\n    features: [\r\n      {\r\n        type: 'Feature',\r\n        properties: {\r\n          icon: 'theatre'\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [-77.038659, 38.931567]\r\n        }\r\n      },\r\n      {\r\n        type: 'Feature',\r\n        properties: {\r\n          icon: 'theatre'\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [-77.003168, 38.894651]\r\n        }\r\n      },\r\n      {\r\n        type: 'Feature',\r\n        properties: {\r\n          icon: 'bar'\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [-77.090372, 38.881189]\r\n        }\r\n      },\r\n      {\r\n        type: 'Feature',\r\n        properties: {\r\n          icon: 'bicycle'\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [-77.052477, 38.943951]\r\n        }\r\n      },\r\n      {\r\n        type: 'Feature',\r\n        properties: {\r\n          icon: 'music'\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [-77.031706, 38.914581]\r\n        }\r\n      },\r\n      {\r\n        type: 'Feature',\r\n        properties: {\r\n          icon: 'music'\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [-77.020945, 38.878241]\r\n        }\r\n      },\r\n      {\r\n        type: 'Feature',\r\n        properties: {\r\n          icon: 'music'\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [-77.007481, 38.876516]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n  return (\r\n    <div className=\"full\">\r\n      <Map\r\n        // ref={mapRef}\r\n        ref={(map) => {\r\n          window.map = map\r\n        }}\r\n        accessToken={mapboxConf.accessToken}\r\n        style=\"mapbox://styles/mapbox/dark-v10\"\r\n        center={[-77.04, 38.907]}\r\n        zoom={11}\r\n      >\r\n        <GeoJSONSource\r\n          id=\"places\"\r\n          option={{\r\n            data: places as any\r\n          }}\r\n        >\r\n          {places.features.map((item) => {\r\n            const iconName = item.properties.icon\r\n            return (\r\n              <Layer\r\n                id={`poi-${iconName}`}\r\n                type=\"symbol\"\r\n                source=\"places\"\r\n                layout={{\r\n                  'icon-image': `${iconName}-15`,\r\n                  'icon-size': 2,\r\n                  'icon-allow-overlap': true,\r\n                  'text-field': iconName,\r\n                  'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\r\n                  'text-size': 11,\r\n                  'text-transform': 'uppercase',\r\n                  'text-letter-spacing': 0.05,\r\n                  'text-offset': [0, 1.5],\r\n                  visibility:\r\n                    iconName.indexOf(key.toLocaleLowerCase()) > -1\r\n                      ? 'visible'\r\n                      : 'none'\r\n                }}\r\n                paint={{\r\n                  'text-color': '#202',\r\n                  'text-halo-color': '#fff',\r\n                  'text-halo-width': 2\r\n                }}\r\n                filter={['==', 'icon', iconName]}\r\n              />\r\n            )\r\n          })}\r\n        </GeoJSONSource>\r\n      </Map>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          left: '50%',\r\n          top: 8,\r\n          transform: 'translate(-50%,0)'\r\n        }}\r\n      >\r\n        <Input\r\n          size=\"large\"\r\n          placeholder=\"\u8f93\u5165\u4f60\u9700\u8981\u8fc7\u6ee4\u7684\u6807\u8bc6\u540d\u79f0\"\r\n          onChange={onChange}\r\n          style={{ width: 300 }}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",des:"Customize camera animations using AnimationOptions.",sanbox:"https://codesandbox.io/s/guolutuceng-h22zl"},{name:"\u529f\u80fd\u5f00\u5173",key:"toggle",code:"import mapboxConf from '@/assets/mapbox.conf'\r\nimport { List, Space, Switch } from 'antd'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Map } from 'react-mapbox-ts'\r\n\r\nconst toggleList = {\r\n  scrollZoom: true,\r\n  boxZoom: true,\r\n  dragRotate: true,\r\n  doubleClickZoom: true,\r\n  dragPan: true,\r\n  keyboard: true,\r\n  touchZoomRotate: true\r\n}\r\n\r\nexport default () => {\r\n  const [toggle, setToggle] = useState(toggleList)\r\n  const onChange = useCallback(\r\n    (open: boolean, key: string) => {\r\n      let newConf = { ...toggle }\r\n      newConf[key] = open\r\n      setToggle(newConf)\r\n    },\r\n    [toggle]\r\n  )\r\n  return (\r\n    <div className=\"full\">\r\n      <Map\r\n        // ref={mapRef}\r\n        ref={(map) => {\r\n          window.map = map\r\n        }}\r\n        accessToken={mapboxConf.accessToken}\r\n        style=\"mapbox://styles/mapbox/streets-v11\"\r\n        center={mapboxConf.center}\r\n        zoom={mapboxConf.zoom}\r\n        scrollZoom={toggle.scrollZoom}\r\n        boxZoom={toggle.boxZoom}\r\n        doubleClickZoom={toggle.doubleClickZoom}\r\n        dragPan={toggle.dragPan}\r\n        dragRotate={toggle.dragRotate}\r\n        keyboard={toggle.keyboard}\r\n        touchZoomRotate={toggle.touchZoomRotate}\r\n      />\r\n      <div\r\n        style={{ position: 'absolute', top: 8, left: 8, background: '#fefefe' }}\r\n      >\r\n        <List\r\n          bordered\r\n          dataSource={Object.keys(toggleList)}\r\n          renderItem={(item) => (\r\n            <List.Item>\r\n              <Space>\r\n                <Switch\r\n                  defaultChecked\r\n                  onChange={(e) => {\r\n                    onChange(e, item)\r\n                  }}\r\n                />\r\n                {item}\r\n              </Space>\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",des:"Customize camera animations using AnimationOptions."}]}},l=e("xtQj"),u=e("gnQV"),d=e("su5N"),f=e("yWlm"),y=e("q1tI"),x=e.n(y),g=e("LtsZ"),b=(e("ZQDC"),c["a"].Sider),S=c["a"].Content,h=i["a"].Item,j=i["a"].SubMenu,_=(s["a"].Title,()=>{var r=Object(y["useState"])("style-map"),n=Object(o["a"])(r,2),s=n[0],_=n[1],C=Object(y["useState"])(!1),k=Object(o["a"])(C,2),R=k[0],M=k[1],w=Object(y["useState"])(!1),E=Object(o["a"])(w,2),v=E[0],L=E[1],T=Object(y["useMemo"])(()=>s.split("-"),[s]),P=Object(o["a"])(T,2),O=P[0],G=P[1],B=Object(y["useMemo"])(()=>m[O].items.find(r=>(null===r||void 0===r?void 0:r.key)===G),[s]),D=Object(y["useCallback"])(()=>Object(g["dynamic"])({loader:()=>e("x61t")("./demos.".concat(O,".").concat(G)),loading:e("97+D").default,delay:400}),[s]),N=Object(y["useCallback"])(r=>{_(r.key),L(!1)},[]),A=Object(y["useCallback"])(()=>{setTimeout(()=>{window.map.resize()},300),M(!R)},[R]),z=Object(y["useCallback"])(()=>{L(!v),setTimeout(()=>{window.map.resize()},300)},[v]),I=Object(y["useMemo"])(()=>D(),[s]);return x.a.createElement(c["a"],{id:"DemosPage"},x.a.createElement(b,{theme:"light",className:"menu-side",width:R?0:300},x.a.createElement(i["a"],{mode:"inline",selectedKeys:[s],onClick:N,defaultOpenKeys:["style-group"]},Object.keys(m).map(r=>{var n=m[r];return x.a.createElement(j,{key:"".concat(r,"-group"),title:n.title},n.items.map(n=>x.a.createElement(h,{key:"".concat(r,"-").concat(n.key)},n.name)))}))),x.a.createElement(S,{className:"demos-content-wrap"},x.a.createElement("div",{className:"demos-content"},x.a.createElement(t["a"],{backIcon:R?x.a.createElement(l["a"],null):x.a.createElement(u["a"],null),className:"content-header",onBack:A,title:B.name,subTitle:B.des,extra:x.a.createElement(x.a.Fragment,null,x.a.createElement(a["a"],{type:"link",icon:x.a.createElement(d["a"],null),onClick:z},v?"\u9690\u85cf":"\u663e\u793a","\u4ee3\u7801"),x.a.createElement(a["a"],{hidden:!B.sanbox,type:"link",icon:x.a.createElement(f["a"],null),href:B.sanbox,target:"_blank"},"\u7f16\u8f91\u4ee3\u7801"))}),x.a.createElement("div",{className:"demos-live"},x.a.createElement(p["a"],{viewCode:v,code:B.code,preview:x.a.createElement(I,null)})))))});n["default"]=_},PML8:function(r,n,e){var t={"./Binary_Property/ASCII.js":"TTPM","./Binary_Property/ASCII_Hex_Digit.js":"rKZ+","./Binary_Property/Alphabetic.js":"PYyx","./Binary_Property/Any.js":"hfac","./Binary_Property/Assigned.js":"2TvA","./Binary_Property/Bidi_Control.js":"BIHX","./Binary_Property/Bidi_Mirrored.js":"Y6X3","./Binary_Property/Case_Ignorable.js":"YL52","./Binary_Property/Cased.js":"hHg9","./Binary_Property/Changes_When_Casefolded.js":"xB3T","./Binary_Property/Changes_When_Casemapped.js":"1N+G","./Binary_Property/Changes_When_Lowercased.js":"v51b","./Binary_Property/Changes_When_NFKC_Casefolded.js":"ayZG","./Binary_Property/Changes_When_Titlecased.js":"IMPD","./Binary_Property/Changes_When_Uppercased.js":"R1Ew","./Binary_Property/Dash.js":"+3kn","./Binary_Property/Default_Ignorable_Code_Point.js":"4/F7","./Binary_Property/Deprecated.js":"wZUC","./Binary_Property/Diacritic.js":"s0pm","./Binary_Property/Emoji.js":"12hi","./Binary_Property/Emoji_Component.js":"mzUC","./Binary_Property/Emoji_Modifier.js":"0nmF","./Binary_Property/Emoji_Modifier_Base.js":"+hQC","./Binary_Property/Emoji_Presentation.js":"ep7J","./Binary_Property/Extended_Pictographic.js":"gx40","./Binary_Property/Extender.js":"jq6q","./Binary_Property/Grapheme_Base.js":"ojcp","./Binary_Property/Grapheme_Extend.js":"V3uO","./Binary_Property/Hex_Digit.js":"4YcT","./Binary_Property/IDS_Binary_Operator.js":"KgQe","./Binary_Property/IDS_Trinary_Operator.js":"rZx1","./Binary_Property/ID_Continue.js":"Z3Cz","./Binary_Property/ID_Start.js":"/VW1","./Binary_Property/Ideographic.js":"VdHZ","./Binary_Property/Join_Control.js":"6XJR","./Binary_Property/Logical_Order_Exception.js":"18Iv","./Binary_Property/Lowercase.js":"RlPj","./Binary_Property/Math.js":"ZtX9","./Binary_Property/Noncharacter_Code_Point.js":"IZLa","./Binary_Property/Pattern_Syntax.js":"YNcp","./Binary_Property/Pattern_White_Space.js":"pLr0","./Binary_Property/Quotation_Mark.js":"bVt1","./Binary_Property/Radical.js":"V6iA","./Binary_Property/Regional_Indicator.js":"gXbN","./Binary_Property/Sentence_Terminal.js":"yNbx","./Binary_Property/Soft_Dotted.js":"TP4o","./Binary_Property/Terminal_Punctuation.js":"SPrB","./Binary_Property/Unified_Ideograph.js":"lqdz","./Binary_Property/Uppercase.js":"wJ4O","./Binary_Property/Variation_Selector.js":"zYVL","./Binary_Property/White_Space.js":"mCz8","./Binary_Property/XID_Continue.js":"7jO/","./Binary_Property/XID_Start.js":"CkxS","./General_Category/Cased_Letter.js":"JTjc","./General_Category/Close_Punctuation.js":"LZZ3","./General_Category/Connector_Punctuation.js":"J7in","./General_Category/Control.js":"ZKzb","./General_Category/Currency_Symbol.js":"S/gH","./General_Category/Dash_Punctuation.js":"OQyL","./General_Category/Decimal_Number.js":"yyEx","./General_Category/Enclosing_Mark.js":"aBVj","./General_Category/Final_Punctuation.js":"K9hv","./General_Category/Format.js":"Ohg8","./General_Category/Initial_Punctuation.js":"DusV","./General_Category/Letter.js":"PVUd","./General_Category/Letter_Number.js":"/soj","./General_Category/Line_Separator.js":"oOya","./General_Category/Lowercase_Letter.js":"PeYj","./General_Category/Mark.js":"yxwC","./General_Category/Math_Symbol.js":"owBG","./General_Category/Modifier_Letter.js":"6oKa","./General_Category/Modifier_Symbol.js":"OMsT","./General_Category/Nonspacing_Mark.js":"ezlQ","./General_Category/Number.js":"0vCW","./General_Category/Open_Punctuation.js":"JpfW","./General_Category/Other.js":"BG0k","./General_Category/Other_Letter.js":"v+A9","./General_Category/Other_Number.js":"l/XR","./General_Category/Other_Punctuation.js":"oeGF","./General_Category/Other_Symbol.js":"5xM+","./General_Category/Paragraph_Separator.js":"TveE","./General_Category/Private_Use.js":"GS9R","./General_Category/Punctuation.js":"CmM2","./General_Category/Separator.js":"HpTs","./General_Category/Space_Separator.js":"Buer","./General_Category/Spacing_Mark.js":"9wuW","./General_Category/Surrogate.js":"vudz","./General_Category/Symbol.js":"/dLw","./General_Category/Titlecase_Letter.js":"3O+O","./General_Category/Unassigned.js":"QXET","./General_Category/Uppercase_Letter.js":"rqE6","./Script/Adlam.js":"Wry+","./Script/Ahom.js":"GsYE","./Script/Anatolian_Hieroglyphs.js":"dOYW","./Script/Arabic.js":"FvNL","./Script/Armenian.js":"/yAK","./Script/Avestan.js":"GcGr","./Script/Balinese.js":"LAM2","./Script/Bamum.js":"7V9v","./Script/Bassa_Vah.js":"kBqS","./Script/Batak.js":"Jx5A","./Script/Bengali.js":"fjIA","./Script/Bhaiksuki.js":"2vIc","./Script/Bopomofo.js":"HLRT","./Script/Brahmi.js":"bntx","./Script/Braille.js":"6O1M","./Script/Buginese.js":"JFG7","./Script/Buhid.js":"wnaP","./Script/Canadian_Aboriginal.js":"OZnc","./Script/Carian.js":"V8Tt","./Script/Caucasian_Albanian.js":"WR1s","./Script/Chakma.js":"vvaZ","./Script/Cham.js":"BrKN","./Script/Cherokee.js":"1CAE","./Script/Chorasmian.js":"Sgk+","./Script/Common.js":"A5PK","./Script/Coptic.js":"HGcO","./Script/Cuneiform.js":"8PCV","./Script/Cypriot.js":"PVma","./Script/Cyrillic.js":"6axZ","./Script/Deseret.js":"OTnk","./Script/Devanagari.js":"hSpq","./Script/Dives_Akuru.js":"Hv6T","./Script/Dogra.js":"D+nV","./Script/Duployan.js":"juuj","./Script/Egyptian_Hieroglyphs.js":"6wcF","./Script/Elbasan.js":"xKmi","./Script/Elymaic.js":"KDQ6","./Script/Ethiopic.js":"ec/7","./Script/Georgian.js":"h4fK","./Script/Glagolitic.js":"hTB4","./Script/Gothic.js":"lazI","./Script/Grantha.js":"gwxh","./Script/Greek.js":"9ulf","./Script/Gujarati.js":"wQeB","./Script/Gunjala_Gondi.js":"N7XW","./Script/Gurmukhi.js":"TQJj","./Script/Han.js":"9H9O","./Script/Hangul.js":"jLBR","./Script/Hanifi_Rohingya.js":"/I8K","./Script/Hanunoo.js":"P0BJ","./Script/Hatran.js":"duBa","./Script/Hebrew.js":"uT2Q","./Script/Hiragana.js":"edsp","./Script/Imperial_Aramaic.js":"61NE","./Script/Inherited.js":"Umia","./Script/Inscriptional_Pahlavi.js":"nwfO","./Script/Inscriptional_Parthian.js":"vAm1","./Script/Javanese.js":"477v","./Script/Kaithi.js":"4172","./Script/Kannada.js":"hUzA","./Script/Katakana.js":"V+/M","./Script/Kayah_Li.js":"a0Op","./Script/Kharoshthi.js":"IxPn","./Script/Khitan_Small_Script.js":"dP5d","./Script/Khmer.js":"QX2T","./Script/Khojki.js":"Eo24","./Script/Khudawadi.js":"+QyN","./Script/Lao.js":"7oRX","./Script/Latin.js":"dN2w","./Script/Lepcha.js":"5bsx","./Script/Limbu.js":"u9lQ","./Script/Linear_A.js":"5scg","./Script/Linear_B.js":"WPcv","./Script/Lisu.js":"aE84","./Script/Lycian.js":"/qLS","./Script/Lydian.js":"lyes","./Script/Mahajani.js":"uwDI","./Script/Makasar.js":"jdFt","./Script/Malayalam.js":"HYoX","./Script/Mandaic.js":"bcGR","./Script/Manichaean.js":"/pZ2","./Script/Marchen.js":"LqhL","./Script/Masaram_Gondi.js":"p1v9","./Script/Medefaidrin.js":"z0Ef","./Script/Meetei_Mayek.js":"IrW+","./Script/Mende_Kikakui.js":"xEZB","./Script/Meroitic_Cursive.js":"Hu3I","./Script/Meroitic_Hieroglyphs.js":"wgmE","./Script/Miao.js":"kd9n","./Script/Modi.js":"cU+8","./Script/Mongolian.js":"tUQf","./Script/Mro.js":"5eRf","./Script/Multani.js":"MG+M","./Script/Myanmar.js":"kiIX","./Script/Nabataean.js":"Uyem","./Script/Nandinagari.js":"9Z7h","./Script/New_Tai_Lue.js":"owni","./Script/Newa.js":"v4Ei","./Script/Nko.js":"whKM","./Script/Nushu.js":"S/lv","./Script/Nyiakeng_Puachue_Hmong.js":"Dpr8","./Script/Ogham.js":"fdhu","./Script/Ol_Chiki.js":"F8j9","./Script/Old_Hungarian.js":"CD0r","./Script/Old_Italic.js":"xaC0","./Script/Old_North_Arabian.js":"twGC","./Script/Old_Permic.js":"2+yD","./Script/Old_Persian.js":"M9F6","./Script/Old_Sogdian.js":"jWEa","./Script/Old_South_Arabian.js":"F0lk","./Script/Old_Turkic.js":"xqwB","./Script/Oriya.js":"uEWo","./Script/Osage.js":"1n5g","./Script/Osmanya.js":"SZfN","./Script/Pahawh_Hmong.js":"RMPE","./Script/Palmyrene.js":"UVpH","./Script/Pau_Cin_Hau.js":"MNEN","./Script/Phags_Pa.js":"NhNr","./Script/Phoenician.js":"34Qh","./Script/Psalter_Pahlavi.js":"SzA2","./Script/Rejang.js":"dC9X","./Script/Runic.js":"t4pw","./Script/Samaritan.js":"pPeY","./Script/Saurashtra.js":"m7G6","./Script/Sharada.js":"NcVZ","./Script/Shavian.js":"RI8b","./Script/Siddham.js":"ASKt","./Script/SignWriting.js":"2JK7","./Script/Sinhala.js":"LZTu","./Script/Sogdian.js":"NpMe","./Script/Sora_Sompeng.js":"Ng/I","./Script/Soyombo.js":"6JnI","./Script/Sundanese.js":"pyWQ","./Script/Syloti_Nagri.js":"LBZI","./Script/Syriac.js":"hy24","./Script/Tagalog.js":"9H8i","./Script/Tagbanwa.js":"sI65","./Script/Tai_Le.js":"nFf/","./Script/Tai_Tham.js":"isMi","./Script/Tai_Viet.js":"IpiY","./Script/Takri.js":"Rqf3","./Script/Tamil.js":"mdlW","./Script/Tangut.js":"n4XR","./Script/Telugu.js":"xlHm","./Script/Thaana.js":"DGa8","./Script/Thai.js":"OQG6","./Script/Tibetan.js":"MYbx","./Script/Tifinagh.js":"ZAyF","./Script/Tirhuta.js":"ojjd","./Script/Ugaritic.js":"kcLn","./Script/Vai.js":"5EYo","./Script/Wancho.js":"IAU5","./Script/Warang_Citi.js":"JUhp","./Script/Yezidi.js":"16uS","./Script/Yi.js":"t4zZ","./Script/Zanabazar_Square.js":"0Z/U","./Script_Extensions/Adlam.js":"mdLn","./Script_Extensions/Ahom.js":"n75q","./Script_Extensions/Anatolian_Hieroglyphs.js":"MHIA","./Script_Extensions/Arabic.js":"1ygP","./Script_Extensions/Armenian.js":"v1yY","./Script_Extensions/Avestan.js":"YulU","./Script_Extensions/Balinese.js":"S+sJ","./Script_Extensions/Bamum.js":"6Ik7","./Script_Extensions/Bassa_Vah.js":"KRcP","./Script_Extensions/Batak.js":"zSGR","./Script_Extensions/Bengali.js":"AyyQ","./Script_Extensions/Bhaiksuki.js":"1ont","./Script_Extensions/Bopomofo.js":"JQ99","./Script_Extensions/Brahmi.js":"jaDh","./Script_Extensions/Braille.js":"lnBL","./Script_Extensions/Buginese.js":"rGMh","./Script_Extensions/Buhid.js":"wcex","./Script_Extensions/Canadian_Aboriginal.js":"uSeW","./Script_Extensions/Carian.js":"zMEA","./Script_Extensions/Caucasian_Albanian.js":"FJfz","./Script_Extensions/Chakma.js":"9LXj","./Script_Extensions/Cham.js":"sceD","./Script_Extensions/Cherokee.js":"5TAg","./Script_Extensions/Chorasmian.js":"jzOb","./Script_Extensions/Common.js":"2rse","./Script_Extensions/Coptic.js":"o3Hh","./Script_Extensions/Cuneiform.js":"Piar","./Script_Extensions/Cypriot.js":"Md75","./Script_Extensions/Cyrillic.js":"CfQf","./Script_Extensions/Deseret.js":"BSjU","./Script_Extensions/Devanagari.js":"uEkq","./Script_Extensions/Dives_Akuru.js":"qtun","./Script_Extensions/Dogra.js":"6hTu","./Script_Extensions/Duployan.js":"rTvz","./Script_Extensions/Egyptian_Hieroglyphs.js":"zIrX","./Script_Extensions/Elbasan.js":"iJwc","./Script_Extensions/Elymaic.js":"SAe1","./Script_Extensions/Ethiopic.js":"oT1F","./Script_Extensions/Georgian.js":"p6v3","./Script_Extensions/Glagolitic.js":"eSoS","./Script_Extensions/Gothic.js":"0h7X","./Script_Extensions/Grantha.js":"a8VH","./Script_Extensions/Greek.js":"T9DP","./Script_Extensions/Gujarati.js":"olBg","./Script_Extensions/Gunjala_Gondi.js":"/Hxr","./Script_Extensions/Gurmukhi.js":"9jCe","./Script_Extensions/Han.js":"VqP8","./Script_Extensions/Hangul.js":"RHGG","./Script_Extensions/Hanifi_Rohingya.js":"dbxg","./Script_Extensions/Hanunoo.js":"8Gun","./Script_Extensions/Hatran.js":"6Ls2","./Script_Extensions/Hebrew.js":"6gQq","./Script_Extensions/Hiragana.js":"i6W2","./Script_Extensions/Imperial_Aramaic.js":"8goA","./Script_Extensions/Inherited.js":"TgRP","./Script_Extensions/Inscriptional_Pahlavi.js":"m1ma","./Script_Extensions/Inscriptional_Parthian.js":"lERh","./Script_Extensions/Javanese.js":"xn3E","./Script_Extensions/Kaithi.js":"K1Le","./Script_Extensions/Kannada.js":"sR9r","./Script_Extensions/Katakana.js":"MpeM","./Script_Extensions/Kayah_Li.js":"EkIy","./Script_Extensions/Kharoshthi.js":"73FR","./Script_Extensions/Khitan_Small_Script.js":"suAS","./Script_Extensions/Khmer.js":"jRTF","./Script_Extensions/Khojki.js":"6zB/","./Script_Extensions/Khudawadi.js":"GI2u","./Script_Extensions/Lao.js":"PQ0K","./Script_Extensions/Latin.js":"2BBF","./Script_Extensions/Lepcha.js":"tF1p","./Script_Extensions/Limbu.js":"zyj0","./Script_Extensions/Linear_A.js":"lFV7","./Script_Extensions/Linear_B.js":"jawv","./Script_Extensions/Lisu.js":"qzaw","./Script_Extensions/Lycian.js":"wqYY","./Script_Extensions/Lydian.js":"n+Zh","./Script_Extensions/Mahajani.js":"z8DC","./Script_Extensions/Makasar.js":"RNCu","./Script_Extensions/Malayalam.js":"wtBk","./Script_Extensions/Mandaic.js":"untw","./Script_Extensions/Manichaean.js":"n1Oh","./Script_Extensions/Marchen.js":"8fW5","./Script_Extensions/Masaram_Gondi.js":"JBN+","./Script_Extensions/Medefaidrin.js":"02tC","./Script_Extensions/Meetei_Mayek.js":"PoXS","./Script_Extensions/Mende_Kikakui.js":"7jK8","./Script_Extensions/Meroitic_Cursive.js":"U8oa","./Script_Extensions/Meroitic_Hieroglyphs.js":"WAkd","./Script_Extensions/Miao.js":"G1tY","./Script_Extensions/Modi.js":"HwGp","./Script_Extensions/Mongolian.js":"WGqn","./Script_Extensions/Mro.js":"UQmg","./Script_Extensions/Multani.js":"WfgX","./Script_Extensions/Myanmar.js":"bqHw","./Script_Extensions/Nabataean.js":"pjPY","./Script_Extensions/Nandinagari.js":"ObV2","./Script_Extensions/New_Tai_Lue.js":"ZsYH","./Script_Extensions/Newa.js":"5tk3","./Script_Extensions/Nko.js":"/kDM","./Script_Extensions/Nushu.js":"JSPL","./Script_Extensions/Nyiakeng_Puachue_Hmong.js":"xsuf","./Script_Extensions/Ogham.js":"2PVI","./Script_Extensions/Ol_Chiki.js":"NTOk","./Script_Extensions/Old_Hungarian.js":"IK5f","./Script_Extensions/Old_Italic.js":"VHj/","./Script_Extensions/Old_North_Arabian.js":"XcdB","./Script_Extensions/Old_Permic.js":"kp9+","./Script_Extensions/Old_Persian.js":"kAvF","./Script_Extensions/Old_Sogdian.js":"oml3","./Script_Extensions/Old_South_Arabian.js":"F3Lr","./Script_Extensions/Old_Turkic.js":"ZaWa","./Script_Extensions/Oriya.js":"MA0n","./Script_Extensions/Osage.js":"i1w3","./Script_Extensions/Osmanya.js":"EVgB","./Script_Extensions/Pahawh_Hmong.js":"EJMw","./Script_Extensions/Palmyrene.js":"kCFO","./Script_Extensions/Pau_Cin_Hau.js":"96ys","./Script_Extensions/Phags_Pa.js":"jca9","./Script_Extensions/Phoenician.js":"sMr2","./Script_Extensions/Psalter_Pahlavi.js":"yP4Y","./Script_Extensions/Rejang.js":"AkQd","./Script_Extensions/Runic.js":"Dm2Y","./Script_Extensions/Samaritan.js":"zWlK","./Script_Extensions/Saurashtra.js":"wOBA","./Script_Extensions/Sharada.js":"idKo","./Script_Extensions/Shavian.js":"Wp8k","./Script_Extensions/Siddham.js":"0OBK","./Script_Extensions/SignWriting.js":"mJRM","./Script_Extensions/Sinhala.js":"7xP4","./Script_Extensions/Sogdian.js":"9VM+","./Script_Extensions/Sora_Sompeng.js":"jM+1","./Script_Extensions/Soyombo.js":"ZSfS","./Script_Extensions/Sundanese.js":"xs8s","./Script_Extensions/Syloti_Nagri.js":"X29h","./Script_Extensions/Syriac.js":"HUGt","./Script_Extensions/Tagalog.js":"9/o/","./Script_Extensions/Tagbanwa.js":"Cw5x","./Script_Extensions/Tai_Le.js":"64uU","./Script_Extensions/Tai_Tham.js":"7GeA","./Script_Extensions/Tai_Viet.js":"wA4O","./Script_Extensions/Takri.js":"MSEK","./Script_Extensions/Tamil.js":"+XeO","./Script_Extensions/Tangut.js":"X2h1","./Script_Extensions/Telugu.js":"a37I","./Script_Extensions/Thaana.js":"YXr4","./Script_Extensions/Thai.js":"9mTJ","./Script_Extensions/Tibetan.js":"hQqI","./Script_Extensions/Tifinagh.js":"MBkK","./Script_Extensions/Tirhuta.js":"wmPc","./Script_Extensions/Ugaritic.js":"tgrt","./Script_Extensions/Vai.js":"cyPN","./Script_Extensions/Wancho.js":"ELeP","./Script_Extensions/Warang_Citi.js":"JEgC","./Script_Extensions/Yezidi.js":"8nCx","./Script_Extensions/Yi.js":"CnAY","./Script_Extensions/Zanabazar_Square.js":"Xx7p","./index.js":"aAIp","./unicode-version.js":"9NKt"};function a(r){var n=o(r);return e(n)}function o(r){if(!e.o(t,r)){var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}return t[r]}a.keys=function(){return Object.keys(t)},a.resolve=o,r.exports=a,a.id="PML8"},ZQDC:function(r,n,e){},cG0u:function(r,n,e){},vn4u:function(r,n,e){"use strict";e("14J3");var t=e("BMrR"),a=(e("jCWc"),e("kPKH")),o=e("q1tI"),s=e.n(o),i=e("hJ+y"),c=(e("cG0u"),r=>{var n=r.code,e=r.scope,o=r.disabled,c=r.preview,p=r.noInline,m=void 0===p||p,l=r.viewCode,u=void 0===l||l;return s.a.createElement(i["d"],{code:n,noInline:!c&&m,scope:e,language:"typescript",theme:{plain:{color:"#e7d2ed"},styles:[{types:["prolog","comment","doctype","cdata"],style:{color:"hsl(30, 20%, 50%)"}},{types:["property","tag","boolean","number","constant","symbol"],style:{color:"#f677e1"}},{types:["attr-name","string","char","builtin","insterted"],style:{color:"hsl(75, 70%, 70%)"}},{types:["operator","entity","url","string","variable","language-css"],style:{color:"hsl(40, 90%, 70%)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["regex","important"],style:{color:"#e90"}},{types:["atrule","attr-value","keyword"],style:{color:"#f677e1"}},{types:["punctuation","symbol"],style:{opacity:.7}}]}},s.a.createElement(t["a"],{id:"LiveCode",justify:"space-between"},s.a.createElement(a["a"],{className:"codebox"},s.a.createElement(t["a"],{className:"wrap"},s.a.createElement(a["a"],{xs:u?24:0,lg:u?12:0,className:"editor"},s.a.createElement(i["a"],{disabled:!!o||!!c,style:{display:u?"block":"none"}})),s.a.createElement(a["a"],{className:"preview",xs:24,lg:u?12:24},c||s.a.createElement(i["c"],null)))),s.a.createElement(a["a"],{className:"error",hidden:!!c},s.a.createElement(i["b"],null))))});n["a"]=c},x61t:function(r,n,e){var t={"./demos.interaction.customizeAnimations":["pnwd",0,4,3,1,12],"./demos.interaction.customizeAnimations.tsx":["pnwd",0,4,3,1,12],"./demos.interaction.draggablePoint":["DGLW",0,6,1,14],"./demos.interaction.draggablePoint.tsx":["DGLW",0,6,1,14],"./demos.interaction.filterSymbols":["wwqF",0,11,1,15],"./demos.interaction.filterSymbols.tsx":["wwqF",0,11,1,15],"./demos.interaction.toggle":["5aTy",0,4,10,1,16],"./demos.interaction.toggle.tsx":["5aTy",0,4,10,1,16],"./demos.layers.bigDataCircles":["Aevh",0,1,17],"./demos.layers.bigDataCircles.tsx":["Aevh",0,1,17],"./demos.layers.buildings3D":["7YGH",0,1,18],"./demos.layers.buildings3D.tsx":["7YGH",0,1,18],"./demos.layers.clusters":["p+rc",0,1,19],"./demos.layers.clusters.tsx":["p+rc",0,1,19],"./demos.layers.gradientLine":["6ees",0,1,20],"./demos.layers.gradientLine.tsx":["6ees",0,1,20],"./demos.layers.heatmap":["Y6BE",0,1,21],"./demos.layers.heatmap.tsx":["Y6BE",0,1,21],"./demos.layers.hillshading":["I1bx",0,1,22],"./demos.layers.hillshading.tsx":["I1bx",0,1,22],"./demos.layers.indoor3D":["yEt5",0,1,23],"./demos.layers.indoor3D.tsx":["yEt5",0,1,23],"./demos.layers.lineAnimate":["RN1p",0,1,24],"./demos.layers.lineAnimate.tsx":["RN1p",0,1,24],"./demos.layers.lineGeoJSON":["HQrQ",0,1,25],"./demos.layers.lineGeoJSON.tsx":["HQrQ",0,1,25],"./demos.layers.model3D":["srO/",0,7,13,1,26],"./demos.layers.model3D.tsx":["srO/",0,7,13,1,26],"./demos.layers.multipleGeometries":["KUZP",0,1,27],"./demos.layers.multipleGeometries.tsx":["KUZP",0,1,27],"./demos.layers.opacityLayer":["snnj",0,3,1,28],"./demos.layers.opacityLayer.tsx":["snnj",0,3,1,28],"./demos.layers.pointAnimate":["mdPX",0,1,29],"./demos.layers.pointAnimate.tsx":["mdPX",0,1,29],"./demos.layers.polygonPic":["GyiS",0,1,30],"./demos.layers.polygonPic.tsx":["GyiS",0,1,30],"./demos.layers.realtime":["a4f4",0,1,31],"./demos.layers.realtime.tsx":["a4f4",0,1,31],"./demos.layers.styleClusters":["dTKC",0,1,32],"./demos.layers.styleClusters.tsx":["dTKC",0,1,32],"./demos.sources.canvas":["2jTx",0,1,33],"./demos.sources.canvas.tsx":["2jTx",0,1,33],"./demos.sources.image":["fKow",0,1,34],"./demos.sources.image.tsx":["fKow",0,1,34],"./demos.sources.realtimeUpdate":["0R3L",0,1,35],"./demos.sources.realtimeUpdate.tsx":["0R3L",0,1,35],"./demos.sources.vectortile":["Q5Kw",0,1,36],"./demos.sources.vectortile.tsx":["Q5Kw",0,1,36],"./demos.sources.video":["gdnd",0,1,37],"./demos.sources.video.tsx":["gdnd",0,1,37],"./demos.sources.wmts":["uR4u",0,2,1,38],"./demos.sources.wmts.tsx":["uR4u",0,2,1,38],"./demos.style.animatedIcon":["yJ2Q",0,1,39],"./demos.style.animatedIcon.tsx":["yJ2Q",0,1,39],"./demos.style.changeStyle":["HAsV",0,2,1,40],"./demos.style.changeStyle.tsx":["HAsV",0,2,1,40],"./demos.style.generatedIcon":["MUQv",0,1,41],"./demos.style.generatedIcon.tsx":["MUQv",0,1,41],"./demos.style.map":["5QNf",0,1,42],"./demos.style.map.tsx":["5QNf",0,1,42],"./demos.style.marker":["mPTG",0,1,43],"./demos.style.marker.tsx":["mPTG",0,1,43],"./demos.style.picIcon":["ywmw",0,1,44],"./demos.style.picIcon.tsx":["ywmw",0,1,44],"./demos.style.worldCopies":["QQCg",0,2,1,45],"./demos.style.worldCopies.tsx":["QQCg",0,2,1,45]};function a(r){if(!e.o(t,r))return Promise.resolve().then((function(){var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}));var n=t[r],a=n[0];return Promise.all(n.slice(1).map(e.e)).then((function(){return e(a)}))}a.keys=function(){return Object.keys(t)},a.id="x61t",r.exports=a}}]);