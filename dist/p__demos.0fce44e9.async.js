(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[45],{"1EAL":function(n,e,t){"use strict";t.r(e);t("h7lp");var a=t("bf48"),o=(t("+L6B"),t("2/Rp")),r=t("ODXe"),s=(t("tU7J"),t("wFql")),i=(t("lUTK"),t("BvKs")),c=(t("B9cy"),t("Ol7k")),p=t("vn4u"),m={style:{title:"\u6837\u5f0f",items:[{name:"\u5730\u56fe",key:"map",code:"import React, { useRef } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nexport default () => {\n  const mapRef = useRef()\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n    />\n  )\n}\n",des:"Display a map"},{name:"\u5730\u56fe\u6807\u6ce8",key:"marker",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport { Button, Tooltip } from 'antd'\nimport React, { useRef } from 'react'\nimport { Map, Marker } from 'react-mapbox-ts'\nexport default () => {\n  const mapRef = useRef()\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n    >\n      <Marker positon={[mapboxConf.center.lon, mapboxConf.center.lat]}>\n        <div id=\"marker-popup\">\n          <Tooltip\n            title={<div>HTML\u63d0\u793a\u6846</div>}\n            getPopupContainer={() => document.getElementById('marker-popup')}\n          >\n            <Button type=\"primary\">HTML\u6807\u6ce8</Button>\n          </Tooltip>\n        </div>\n      </Marker>\n      <Marker draggable positon={[114.365248, 30.53786]}>\n        <Button type=\"danger\">\u53ef\u62d6\u52a8</Button>\n      </Marker>\n      <Marker\n        positon={[114.352309, 30.518589]}\n        popup={<div>\u539f\u751f\u63d0\u793a\u6846</div>}\n        popupOption={{\n          closeOnClick: true,\n          closeButton: false,\n          closeOnMove: true,\n          offset: 20\n        }}\n      >\n        <Button type=\"default\" shape=\"round\">\n          \u539f\u751f\u63d0\u793a\u6846\n        </Button>\n      </Marker>\n    </Map>\n  )\n}\n",des:"Add a default Marker to the map."},{name:"\u6e32\u67d3\u4e16\u754c\u526f\u672c",key:"worldCopies",code:"import { Map } from 'react-mapbox-ts'\nimport { Radio } from 'antd'\nimport React, { useCallback, useState } from 'react'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst defaultValue = 1\nexport default () => {\n  const [value, setValue] = useState(!!defaultValue)\n  const ValueChange = useCallback((e: RadioChangeEvent) => {\n    setValue(!!e.target.value)\n  }, [])\n  return (\n    <div className=\"full\">\n      <Map\n        // ref={mapRef}\n        ref={(map) => {\n          window.map = map\n        }}\n        accessToken={mapboxConf.accessToken}\n        style=\"mapbox://styles/mapbox/streets-v11\"\n        renderWorldCopies={!!value}\n        center={mapboxConf.center}\n        zoom={mapboxConf.zoom}\n      />\n      <div style={{ position: 'absolute', top: 8 }}>\n        <Radio.Group\n          defaultValue={defaultValue}\n          onChange={ValueChange}\n          buttonStyle=\"solid\"\n        >\n          <Radio.Button value={1}>True</Radio.Button>\n          <Radio.Button value={0}>False</Radio.Button>\n        </Radio.Group>\n      </div>\n    </div>\n  )\n}\n",des:"Toggle between rendering a single world and multiple copies of the world."},{name:"\u66f4\u6539\u6837\u5f0f",key:"changeStyle",code:"import { Map } from 'react-mapbox-ts'\nimport { Radio } from 'antd'\nimport React, { useCallback, useState } from 'react'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport mapboxConf from '@/assets/mapbox.conf'\n\nconst defaultValue = 'streets-v11'\nexport default () => {\n  const [style, setStyle] = useState(defaultValue)\n  const StyleChange = useCallback((e: RadioChangeEvent) => {\n    setStyle(e.target.value)\n  }, [])\n  return (\n    <div className=\"full\">\n      <Map\n        // ref={mapRef}\n        ref={(map) => {\n          window.map = map\n        }}\n        accessToken={mapboxConf.accessToken}\n        style={`mapbox://styles/mapbox/${style}`}\n        center={mapboxConf.center}\n        zoom={mapboxConf.zoom}\n      />\n      <div style={{ position: 'absolute', top: 8 }}>\n        <Radio.Group\n          defaultValue={defaultValue}\n          onChange={StyleChange}\n          buttonStyle=\"solid\"\n        >\n          <Radio.Button value=\"streets-v11\">Streets</Radio.Button>\n          <Radio.Button value=\"light-v10\">Light</Radio.Button>\n          <Radio.Button value=\"dark-v10\">Dark</Radio.Button>\n          <Radio.Button value=\"outdoors-v11\">Outdoors</Radio.Button>\n          <Radio.Button value=\"satellite-v9\">Satellite</Radio.Button>\n        </Radio.Group>\n      </div>\n    </div>\n  )\n}\n",des:"Switch to another map style"},{name:"\u751f\u6210\u56fe\u6807",key:"generatedIcon",code:"import React, { useRef, useEffect, useMemo } from 'react'\nimport { Map, AddImage, GeoJSONSource, Layer } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  const width = 64\n  const imgData = useMemo(() => {\n    const bytesPerPixel = 4\n    const data = new Uint8Array(width * width * bytesPerPixel)\n    for (var x = 0; x < width; x++) {\n      for (var y = 0; y < width; y++) {\n        var offset = (y * width + x) * bytesPerPixel\n        data[offset + 0] = (y / width) * 255 // red\n        data[offset + 1] = (x / width) * 255 // green\n        data[offset + 2] = 128 // blue\n        data[offset + 3] = 255 // alpha\n      }\n    }\n    return data\n  }, [])\n\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n    >\n      <AddImage\n        name=\"gradient\"\n        image={{\n          width,\n          height: width,\n          data: imgData\n        }}\n      >\n        <GeoJSONSource\n          id=\"point\"\n          option={{\n            data: {\n              type: 'FeatureCollection',\n              features: [\n                {\n                  type: 'Feature',\n                  geometry: {\n                    type: 'Point',\n                    coordinates: [0, 0]\n                  }\n                }\n              ]\n            }\n          }}\n        >\n          <Layer\n            id=\"points\"\n            type=\"symbol\"\n            source=\"point\"\n            layout={{\n              'icon-image': 'gradient'\n            }}\n          />\n        </GeoJSONSource>\n      </AddImage>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Add an icon to the map that was generated at runtime."},{name:"\u52a8\u753b\u56fe\u6807",key:"animatedIcon",code:"import React, { useRef, useEffect, useMemo, useState } from 'react'\nimport { Map, AddImage, GeoJSONSource, Layer } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\n\nclass imageData {\n  size: number = 0\n  width: number\n  height: number\n  data: Uint8ClampedArray | Uint8Array\n  context: CanvasRenderingContext2D\n  map: mapboxgl.MapBoxPlus\n  constructor(size: number) {\n    this.size = this.width = this.height = size\n    this.data = new Uint8Array(size * size * 4)\n  }\n  onAdd(map: mapboxgl.MapBoxPlus) {\n    const canvas = document.createElement('canvas')\n    canvas.width = this.size\n    canvas.height = this.size\n    this.context = canvas.getContext('2d')\n    this.map = map\n  }\n  render() {\n    var duration = 1000\n    var t = (performance.now() % duration) / duration\n    var radius = (this.size / 2) * 0.3\n    var outerRadius = (this.size / 2) * 0.7 * t + radius\n    var context = this.context\n    context.clearRect(0, 0, this.width, this.height)\n    context.beginPath()\n    context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2)\n    context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')'\n    context.fill()\n    context.beginPath()\n    context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2)\n    context.fillStyle = 'rgba(255, 100, 100, 1)'\n    context.strokeStyle = 'white'\n    context.lineWidth = 2 + 4 * (1 - t)\n    context.fill()\n    context.stroke()\n    this.data = context.getImageData(0, 0, this.width, this.height).data\n    if (!!this.map) {\n      this.map.triggerRepaint()\n    }\n    return true\n  }\n}\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  const imgClass = useMemo(() => new imageData(200), [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n    >\n      <AddImage\n        name=\"pulsing-dot\"\n        image={imgClass}\n        options={{\n          pixelRatio: 2\n        }}\n      >\n        <GeoJSONSource\n          id=\"point\"\n          option={{\n            data: {\n              type: 'FeatureCollection',\n              features: [\n                {\n                  type: 'Feature',\n                  geometry: {\n                    type: 'Point',\n                    coordinates: [0, 0]\n                  }\n                }\n              ]\n            }\n          }}\n        >\n          <Layer\n            id=\"points\"\n            type=\"symbol\"\n            source=\"point\"\n            layout={{\n              'icon-image': 'pulsing-dot'\n            }}\n          />\n        </GeoJSONSource>\n      </AddImage>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Add an animated icon to the map that was generated at runtime with a Canvas."},{name:"\u56fe\u7247\u63d2\u5165",key:"picIcon",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport React, { useRef } from 'react'\nimport { GeoJSONSource, Layer, LoadImage, Map } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n    >\n      <LoadImage\n        name=\"cat\"\n        url=\"https://upload.wikimedia.org/wikipedia/commons/7/7c/201408_cat.png\"\n        options={{\n          pixelRatio: 2\n        }}\n      >\n        <GeoJSONSource\n          id=\"point\"\n          option={{\n            data: {\n              type: 'FeatureCollection',\n              features: [\n                {\n                  type: 'Feature',\n                  geometry: {\n                    type: 'Point',\n                    coordinates: [0, 0]\n                  }\n                },\n                {\n                  type: 'Feature',\n                  geometry: {\n                    type: 'Point',\n                    coordinates: [5, 5]\n                  }\n                }\n              ]\n            }\n          }}\n        >\n          <Layer\n            id=\"points\"\n            type=\"symbol\"\n            source=\"point\"\n            layout={{\n              'icon-image': 'cat',\n              'icon-size': 0.25\n            }}\n          />\n        </GeoJSONSource>\n      </LoadImage>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Add an icon to the map from an external URL and use it in a symbol layer."}]},layers:{title:"\u56fe\u5c42",items:[{name:"3D\u6a21\u578b",key:"model3D",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport mapboxgl from 'mapbox-gl'\nimport React, { useRef } from 'react'\nimport { Map, CustomLayerData, CustomLayer } from 'react-mapbox-ts'\nimport { LngLatLike } from 'mapbox-gl'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport * as THREE from 'three'\n\nconst customLayerData = (): CustomLayerData => {\n  const modelOrigin: LngLatLike = [148.9819, -35.39847]\n  const modelAltitude = 0\n  const modelRotate = [Math.PI / 2, 0, 0]\n  const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(\n    modelOrigin,\n    modelAltitude\n  )\n  const modelTransform = {\n    translateX: modelAsMercatorCoordinate.x,\n    translateY: modelAsMercatorCoordinate.y,\n    translateZ: modelAsMercatorCoordinate.z,\n    rotateX: modelRotate[0],\n    rotateY: modelRotate[1],\n    rotateZ: modelRotate[2],\n    scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\n  }\n  return {\n    id: '3d-model',\n    type: 'custom',\n    renderingMode: '3d',\n    render(gl, matrix) {\n      var rotationX = new THREE.Matrix4().makeRotationAxis(\n        new THREE.Vector3(1, 0, 0),\n        modelTransform.rotateX\n      )\n      var rotationY = new THREE.Matrix4().makeRotationAxis(\n        new THREE.Vector3(0, 1, 0),\n        modelTransform.rotateY\n      )\n      var rotationZ = new THREE.Matrix4().makeRotationAxis(\n        new THREE.Vector3(0, 0, 1),\n        modelTransform.rotateZ\n      )\n      var m = new THREE.Matrix4().fromArray(matrix)\n      var l = new THREE.Matrix4()\n        .makeTranslation(\n          modelTransform.translateX,\n          modelTransform.translateY,\n          modelTransform.translateZ\n        )\n        .scale(\n          new THREE.Vector3(\n            modelTransform.scale,\n            -modelTransform.scale,\n            modelTransform.scale\n          )\n        )\n        .multiply(rotationX)\n        .multiply(rotationY)\n        .multiply(rotationZ)\n      this.camera.projectionMatrix = m.multiply(l)\n      this.renderer.state.reset()\n      this.renderer.render(this.scene, this.camera)\n      this.map.triggerRepaint()\n    },\n    onAdd(map, gl) {\n      this.map = map\n      this.camera = new THREE.Camera()\n      this.scene = new THREE.Scene()\n      var directionalLight = new THREE.DirectionalLight(0xffffff)\n      directionalLight.position.set(0, -70, 100).normalize()\n      this.scene.add(directionalLight)\n\n      var directionalLight2 = new THREE.DirectionalLight(0xffffff)\n      directionalLight2.position.set(0, 70, 100).normalize()\n      this.scene.add(directionalLight2)\n      var loader = new GLTFLoader()\n      loader.load(\n        'https://docs.mapbox.com/mapbox-gl-js/assets/34M_17/34M_17.gltf',\n        (gltf) => {\n          this.scene.add(gltf.scene)\n        }\n      )\n      this.renderer = new THREE.WebGLRenderer({\n        canvas: map.getCanvas(),\n        context: gl,\n        antialias: true\n      })\n      this.renderer.autoClear = false\n    }\n  }\n}\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n        mapRef.current = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/light-v10\"\n      zoom={18}\n      center={[148.9819, -35.3981]}\n      pitch={60}\n      antialias={true}\n    >\n      <CustomLayer data={customLayerData()} />\n    </Map>\n  )\n}\nexport default Demo\n",des:"Use a custom style layer with three.js to add a 3D model to the map."},,{name:"\u6587\u672c\u6837\u5f0f",key:"textStyle",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Uses the format expression to display country labels in both English and in the local language."},{name:"\u56fe\u7247\u6e32\u67d3\u591a\u8fb9\u5f62",key:"polygonPic",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Use fill-pattern to draw a polygon from a repeating image pattern."},{name:"GeoJSON\u70b9",key:"pointGeoJSON",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Draw points from a GeoJSON collection to a map."},{name:"\u70b9\u52a8\u753b",key:"pointAnimate",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport mapboxgl from 'mapbox-gl'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  let animation = useRef<number>().current\n  const [data, setData] = useState<any>()\n  const radius = 20\n  const pointOnCircle = useCallback((angle: number) => {\n    return {\n      type: 'Point',\n      coordinates: [Math.cos(angle) * radius, Math.sin(angle) * radius]\n    }\n  }, [])\n  const animate = useCallback(() => {\n    function animateLine(timestamp?: number) {\n      setData(pointOnCircle(timestamp / 1000))\n      requestAnimationFrame(animateLine)\n    }\n    animateLine()\n  }, [])\n\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n        mapRef.current = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/streets-v11\"\n      zoom={2}\n      center={[0, 0]}\n      onLoad={() => {\n        animate()\n      }}\n    >\n      <GeoJSONSource\n        id=\"point\"\n        option={{\n          data: data || pointOnCircle(0)\n        }}\n      >\n        <Layer\n          id=\"point\"\n          source=\"point\"\n          type=\"circle\"\n          paint={{\n            'circle-radius': 10,\n            'circle-color': '#007cbf'\n          }}\n        />\n      </GeoJSONSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Animate the position of a point by updating a GeoJSON source on each frame."},{name:"\u56fe\u5c42\u900f\u660e\u5ea6",key:"opacityLayer",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport { Slider } from 'antd'\nimport mapboxgl from 'mapbox-gl'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { Layer, Map, RasterSource } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  const [opacity, setOpacity] = useState(40)\n  const onChange = useCallback(\n    (value: number) => {\n      setOpacity(value)\n    },\n    [opacity]\n  )\n  return (\n    <div className=\"full\">\n      <Map\n        // ref={mapRef}\n        ref={(map) => {\n          window.map = map\n          mapRef.current = map\n        }}\n        accessToken={mapboxConf.accessToken}\n        style=\"mapbox://styles/mapbox/dark-v9\"\n        zoom={10}\n        center={[-87.6321, 41.8362]}\n        minZoom={9}\n        maxZoom={13}\n      >\n        <RasterSource\n          id=\"chicago\"\n          option={{\n            url: 'mapbox://mapbox.u8yyzaor'\n          }}\n        >\n          <Layer\n            id=\"chicago\"\n            source=\"chicago\"\n            type=\"raster\"\n            paint={{\n              'raster-opacity': opacity / 100\n            }}\n          />\n        </RasterSource>\n      </Map>\n      <div style={{ position: 'absolute', top: 15, width: '60%', left: '20%' }}>\n        <Slider\n          min={0}\n          max={100}\n          step={10}\n          value={opacity}\n          defaultValue={40}\n          onChange={onChange}\n        />\n      </div>\n    </div>\n  )\n}\nexport default Demo\n",des:"Drag the range slider to adjust the opacity of a raster layer on top of a map."},{name:"GeoJSON\u7ebf",key:"lineGeoJSON",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Add a GeoJSON line to a map."},{name:"\u7ebf\u52a8\u753b",key:"lineAnimate",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport mapboxgl from 'mapbox-gl'\nimport React, { useRef, useCallback, useState } from 'react'\nimport { Map, GeoJSONSource, Layer } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  let animation = useRef<number>().current\n  const [data, setData] = useState<any>([[0, 0]])\n  let dataRef = useRef([[0, 0]]).current\n  let resetTime = useRef(false).current\n  let startTime = useRef(0).current\n  let progress = useRef(0).current\n  const animate = useCallback(() => {\n    const speedFactor = 30\n    function animateLine(timestamp?: number) {\n      if (resetTime) {\n        startTime = performance.now() - progress\n        resetTime = false\n      } else {\n        progress = timestamp - startTime\n      }\n      if (progress > speedFactor * 360) {\n        startTime = timestamp\n        dataRef = []\n      } else {\n        var x = progress / speedFactor\n        var y = Math.sin((x * Math.PI) / 90) * 40\n        dataRef.push([x, y])\n        setData([...dataRef])\n      }\n      animation = requestAnimationFrame(animateLine)\n    }\n    animateLine()\n  }, [])\n  const onClick = useCallback(() => {\n    if (animation) {\n      cancelAnimationFrame(animation)\n      animation = null\n    } else {\n      resetTime = true\n      animate()\n    }\n  }, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n        mapRef.current = map\n      }}\n      onClick={onClick}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/streets-v11\"\n      zoom={0.5}\n      center={[0, 0]}\n    >\n      <GeoJSONSource\n        id=\"line\"\n        option={{\n          data: {\n            type: 'FeatureCollection',\n            features: [\n              {\n                type: 'Feature',\n                geometry: {\n                  type: 'LineString',\n                  coordinates: data\n                }\n              }\n            ]\n          }\n        }}\n      >\n        <Layer\n          id=\"line-animation\"\n          source=\"line\"\n          type=\"line\"\n          paint={{\n            'line-color': '#ed6498',\n            'line-width': 5,\n            'line-opacity': 0.8\n          }}\n          layout={{\n            'line-cap': 'round',\n            'line-join': 'round'\n          }}\n        />\n      </GeoJSONSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Animate a line by updating a GeoJSON source on each frame."},{name:"\u6807\u7b7e\u56fe\u5c42",key:"labelsLayer",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Using the second argument of addLayer, you can be more precise."},{name:"\u4e09\u7ef4\u5ba4\u5185",key:"indoor3D",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport mapboxgl from 'mapbox-gl'\nimport React, { useRef } from 'react'\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n        mapRef.current = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/streets-v11\"\n      zoom={16}\n      center={[-87.61694, 41.86625]}\n      pitch={40}\n      bearing={20}\n      antialias={true}\n    >\n      <GeoJSONSource\n        id=\"floorplan\"\n        option={{\n          data:\n            'https://docs.mapbox.com/mapbox-gl-js/assets/indoor-3d-map.geojson'\n        }}\n      >\n        <Layer\n          id=\"room-extrusion\"\n          type=\"fill-extrusion\"\n          source=\"floorplan\"\n          paint={{\n            'fill-extrusion-color': ['get', 'color'],\n            'fill-extrusion-height': ['get', 'height'],\n            'fill-extrusion-base': ['get', 'base_height'],\n            'fill-extrusion-opacity': 0.5\n          }}\n        />\n      </GeoJSONSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Create a 3D indoor map with the fill-extrude-height paint property."},{name:"Gif\u56fe\u7247",key:"gifPic",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Use a series of image sources to create an animation."},{name:"\u81ea\u5b9a\u4e49\u56fe\u5c42",key:"customLayer",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Use a custom style layer to render custom WebGL content."},{name:"HTML\u6807\u6ce8\u805a\u5408",key:"clusters",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport mapboxgl from 'mapbox-gl'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { GeoJSONSource, Layer, Map, Marker } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  const mag1 = ['<', ['get', 'mag'], 2]\n  const mag2 = ['all', ['>=', ['get', 'mag'], 2], ['<', ['get', 'mag'], 3]]\n  const mag3 = ['all', ['>=', ['get', 'mag'], 3], ['<', ['get', 'mag'], 4]]\n  const mag4 = ['all', ['>=', ['get', 'mag'], 4], ['<', ['get', 'mag'], 5]]\n  const mag5 = ['>=', ['get', 'mag'], 5]\n  const colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c']\n\n  let markers = useRef({}).current\n  let [markersOnScreen, setMarkersOnScreen] = useState({})\n\n  const updateMarkers = useCallback(() => {\n    {\n      let newMarkers = {}\n      let features = mapRef.current.querySourceFeatures('earthquakes')\n      for (let i = 0; i < features.length; i++) {\n        let coords = features[i].geometry['coordinates']\n        let props = features[i].properties\n        if (!props.cluster) continue\n        let id = props.cluster_id\n        let marker = markers[id]\n        if (!marker) {\n          let el = createDonutChart(props)\n          marker = markers[id] = {\n            positon: coords,\n            children: el\n          }\n        }\n        newMarkers[id] = marker\n      }\n\n      setMarkersOnScreen(newMarkers)\n    }\n  }, [])\n  const createDonutChart = useCallback((props) => {\n    {\n      let offsets = []\n      let counts = [props.mag1, props.mag2, props.mag3, props.mag4, props.mag5]\n      let total = 0\n      for (let i = 0; i < counts.length; i++) {\n        offsets.push(total)\n        total += counts[i]\n      }\n      let fontSize =\n        total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16\n      let r = total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18\n      let r0 = Math.round(r * 0.6)\n      let w = r * 2\n      let html =\n        '<svg width=\"' +\n        w +\n        '\" height=\"' +\n        w +\n        '\" viewbox=\"0 0 ' +\n        w +\n        ' ' +\n        w +\n        '\" text-anchor=\"middle\" style=\"font: ' +\n        fontSize +\n        'px sans-serif\">'\n\n      for (let i = 0; i < counts.length; i++) {\n        html += donutSegment(\n          offsets[i] / total,\n          (offsets[i] + counts[i]) / total,\n          r,\n          r0,\n          colors[i]\n        )\n      }\n      html +=\n        '<circle cx=\"' +\n        r +\n        '\" cy=\"' +\n        r +\n        '\" r=\"' +\n        r0 +\n        '\" fill=\"white\" /><text dominant-baseline=\"central\" transform=\"translate(' +\n        r +\n        ', ' +\n        r +\n        ')\">' +\n        total.toLocaleString() +\n        '</text></svg>'\n      return html\n    }\n  }, [])\n\n  const donutSegment = useCallback((start, end, r, r0, color) => {\n    if (end - start === 1) end -= 0.00001\n    let a0 = 2 * Math.PI * (start - 0.25)\n    let a1 = 2 * Math.PI * (end - 0.25)\n    let x0 = Math.cos(a0),\n      y0 = Math.sin(a0)\n    let x1 = Math.cos(a1),\n      y1 = Math.sin(a1)\n    let largeArc = end - start > 0.5 ? 1 : 0\n    return [\n      '<path d=\"M',\n      r + r0 * x0,\n      r + r0 * y0,\n      'L',\n      r + r * x0,\n      r + r * y0,\n      'A',\n      r,\n      r,\n      0,\n      largeArc,\n      1,\n      r + r * x1,\n      r + r * y1,\n      'L',\n      r + r0 * x1,\n      r + r0 * y1,\n      'A',\n      r0,\n      r0,\n      0,\n      largeArc,\n      0,\n      r + r0 * x0,\n      r + r0 * y0,\n      '\" fill=\"' + color + '\" />'\n    ].join(' ')\n  }, [])\n\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n        mapRef.current = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/dark-v9\"\n      zoom={2}\n      center={[0, 0]}\n      onData={updateMarkers}\n      onMove={updateMarkers}\n      onMoveEnd={updateMarkers}\n    >\n      {Object.keys(markersOnScreen).map((key) => {\n        return (\n          <Marker key={key} positon={markersOnScreen[key].positon}>\n            <div\n              dangerouslySetInnerHTML={{\n                __html: markersOnScreen[key].children\n              }}\n            />\n          </Marker>\n        )\n      })}\n      <GeoJSONSource\n        id=\"earthquakes\"\n        option={{\n          data:\n            'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n          cluster: true,\n          clusterRadius: 80,\n          clusterProperties: {\n            mag1: ['+', ['case', mag1, 1, 0]],\n            mag2: ['+', ['case', mag2, 1, 0]],\n            mag3: ['+', ['case', mag3, 1, 0]],\n            mag4: ['+', ['case', mag4, 1, 0]],\n            mag5: ['+', ['case', mag5, 1, 0]]\n          }\n        }}\n      >\n        <Layer\n          id=\"earthquake_circle\"\n          source=\"earthquakes\"\n          type=\"circle\"\n          paint={{\n            'circle-color': [\n              'case',\n              mag1,\n              colors[0],\n              mag2,\n              colors[1],\n              mag3,\n              colors[2],\n              mag4,\n              colors[3],\n              colors[4]\n            ],\n            'circle-opacity': 0.6,\n            'circle-radius': 12\n          }}\n          filter={['!=', 'cluster', true]}\n        />\n        <Layer\n          id=\"earthquake_label\"\n          type=\"symbol\"\n          source=\"earthquakes\"\n          filter={['!=', 'cluster', true]}\n          layout={{\n            'text-field': [\n              'number-format',\n              ['get', 'mag'],\n              { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\n            ],\n            'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n            'text-size': 10\n          }}\n          paint={{\n            'text-color': ['case', ['<', ['get', 'mag'], 3], 'black', 'white']\n          }}\n        />\n      </GeoJSONSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Display HTML clusters with custom properties"},{name:"Style\u6807\u6ce8\u805a\u5408",key:"styleClusters",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport mapboxgl, { LngLatLike } from 'mapbox-gl'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { GeoJSONSource, Layer, Map, Popup } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.MapBoxPlus>()\n  const sourceRef = useRef<mapboxgl.GeoJSONSource>()\n  const [popConf, setPopConf] = useState({\n    positon: [0, 0] as LngLatLike,\n    children: null,\n    hidden: true\n  })\n  const clustersOnClick = useCallback((e) => {\n    var features = mapRef.current.queryRenderedFeatures(e.point, {\n      layers: ['clusters']\n    })\n    var clusterId = features[0].properties.cluster_id\n    sourceRef.current.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return\n      mapRef.current.easeTo({\n        center: features[0].geometry['coordinates'],\n        zoom: zoom\n      })\n    })\n  }, [])\n\n  const unclusteredOnClick = useCallback((e) => {\n    let coordinates = e.features[0].geometry.coordinates.slice()\n    let mag = e.features[0].properties.mag\n    let tsunami\n    if (e.features[0].properties.tsunami === 1) {\n      tsunami = 'yes'\n    } else {\n      tsunami = 'no'\n    }\n    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n      coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360\n    }\n    setPopConf({\n      positon: coordinates,\n      children: 'magnitude: ' + mag + '<br>Was there a tsunami?: ' + tsunami,\n      hidden: false\n    })\n  }, [])\n\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n        mapRef.current = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/dark-v10\"\n      zoom={3}\n      center={[-103.59179687498357, 40.66995747013945]}\n    >\n      <Popup\n        positon={popConf.positon}\n        hidden={popConf.hidden}\n        closeButton={false}\n        closeOnMove={true}\n      >\n        <div dangerouslySetInnerHTML={{ __html: popConf.children }} />\n      </Popup>\n      <GeoJSONSource\n        ref={sourceRef}\n        id=\"earthquakes\"\n        option={{\n          data:\n            'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n          cluster: true,\n          clusterRadius: 50,\n          clusterMaxZoom: 14\n        }}\n      >\n        <Layer\n          id=\"clusters\"\n          source=\"earthquakes\"\n          type=\"circle\"\n          paint={{\n            'circle-color': [\n              'step',\n              ['get', 'point_count'],\n              '#51bbd6',\n              100,\n              '#f1f075',\n              750,\n              '#f28cb1'\n            ],\n            'circle-radius': [\n              'step',\n              ['get', 'point_count'],\n              20,\n              100,\n              30,\n              750,\n              40\n            ]\n          }}\n          filter={['has', 'point_count']}\n          onClick={clustersOnClick}\n        />\n        <Layer\n          id=\"cluster-count\"\n          type=\"symbol\"\n          source=\"earthquakes\"\n          filter={['has', 'point_count']}\n          layout={{\n            'text-field': '{point_count_abbreviated}',\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': 12\n          }}\n        />\n        <Layer\n          id=\"unclustered-point\"\n          type=\"circle\"\n          source=\"earthquakes\"\n          filter={['!', ['has', 'point_count']]}\n          paint={{\n            'circle-color': '#11b4da',\n            'circle-radius': 4,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }}\n          onClick={unclusteredOnClick}\n        />\n      </GeoJSONSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Use Mapbox GL JS built-in functions to visualize points as clusters."},{name:"\u4e09\u7ef4\u5efa\u7b51",key:"buildings3D",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport React, { useRef } from 'react'\nimport { Layer, Map } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        mapRef.current = map\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/light-v10\"\n      zoom={15}\n      center={[-74.0066, 40.7135]}\n      workercount={16}\n      pitch={45}\n      bearing={-17.6}\n    >\n      <Layer\n        id=\"3d-buildings\"\n        source=\"composite\"\n        sourceLayer=\"building\"\n        filter={['==', 'extrude', 'true']}\n        type=\"fill-extrusion\"\n        minzoom={15}\n        paint={{\n          'fill-extrusion-color': '#aaa',\n          'fill-extrusion-height': {\n            type: 'identity',\n            property: 'height'\n          },\n          'fill-extrusion-base': {\n            type: 'identity',\n            property: 'min_height'\n          },\n          'fill-extrusion-opacity': 0.6\n        }}\n      />\n    </Map>\n  )\n}\nexport default Demo\n",des:"Use extrusions to display buildings height in 3D."},{name:"\u5927\u6570\u636e\u6e32\u67d3",key:"bigDataCircles",code:"import React, { useRef, useEffect } from 'react'\nimport { Map, VectorSource, Layer } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={[-122.447303, 37.753574]}\n      zoom={12}\n      workercount={100}\n    >\n      <VectorSource\n        id=\"ethnicity\"\n        option={{\n          url: 'mapbox://examples.8fgz4egr'\n        }}\n      >\n        <Layer\n          id=\"population\"\n          type=\"circle\"\n          source=\"ethnicity\"\n          sourceLayer=\"sf2010\"\n          paint={{\n            'circle-radius': {\n              base: 1.75,\n              stops: [\n                [12, 2],\n                [22, 180]\n              ]\n            },\n            // color circles by ethnicity, using a match expression\n            // https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-match\n            'circle-color': [\n              'match',\n              ['get', 'ethnicity'],\n              'White',\n              '#fbb03b',\n              'Black',\n              '#223b53',\n              'Hispanic',\n              '#e55e5e',\n              'Asian',\n              '#3bb2d0',\n              /* other */ '#ccc'\n            ]\n          }}\n        />\n      </VectorSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Creating a visualization with a data expression for circle-color."},{name:"\u70ed\u529b\u56fe",key:"heatmap",code:"import React, { useRef, useEffect } from 'react'\nimport { Map, VectorSource, Layer, GeoJSONSource } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/dark-v10\"\n      center={[-120, 50]}\n      zoom={2}\n      workercount={100}\n    >\n      <GeoJSONSource\n        id=\"earthquakes\"\n        option={{\n          data:\n            'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson'\n        }}\n      >\n        <Layer\n          id=\"earthquakes-heat\"\n          type=\"heatmap\"\n          source=\"earthquakes\"\n          maxzoom={9}\n          paint={{\n            'heatmap-weight': [\n              'interpolate',\n              ['linear'],\n              ['get', 'mag'],\n              0,\n              0,\n              6,\n              1\n            ],\n            // Increase the heatmap color weight weight by zoom level\n            // heatmap-intensity is a multiplier on top of heatmap-weight\n            'heatmap-intensity': [\n              'interpolate',\n              ['linear'],\n              ['zoom'],\n              0,\n              1,\n              9,\n              3\n            ],\n            // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n            // Begin color ramp at 0-stop with a 0-transparancy color\n            // to create a blur-like effect.\n            'heatmap-color': [\n              'interpolate',\n              ['linear'],\n              ['heatmap-density'],\n              0,\n              'rgba(33,102,172,0)',\n              0.2,\n              'rgb(103,169,207)',\n              0.4,\n              'rgb(209,229,240)',\n              0.6,\n              'rgb(253,219,199)',\n              0.8,\n              'rgb(239,138,98)',\n              1,\n              'rgb(178,24,43)'\n            ],\n            // Adjust the heatmap radius by zoom level\n            'heatmap-radius': [\n              'interpolate',\n              ['linear'],\n              ['zoom'],\n              0,\n              2,\n              9,\n              20\n            ],\n            // Transition from heatmap to circle layer by zoom level\n            'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0]\n          }}\n          before=\"waterway-label\"\n        />\n        <Layer\n          id=\"earthquakes-point\"\n          type=\"circle\"\n          source=\"earthquakes\"\n          minzoom={7}\n          paint={{\n            'circle-radius': [\n              'interpolate',\n              ['linear'],\n              ['zoom'],\n              7,\n              ['interpolate', ['linear'], ['get', 'mag'], 1, 1, 6, 4],\n              16,\n              ['interpolate', ['linear'], ['get', 'mag'], 1, 5, 6, 50]\n            ],\n            // Color circle by earthquake magnitude\n            'circle-color': [\n              'interpolate',\n              ['linear'],\n              ['get', 'mag'],\n              1,\n              'rgba(33,102,172,0)',\n              2,\n              'rgb(103,169,207)',\n              3,\n              'rgb(209,229,240)',\n              4,\n              'rgb(253,219,199)',\n              5,\n              'rgb(239,138,98)',\n              6,\n              'rgb(178,24,43)'\n            ],\n            'circle-stroke-color': 'white',\n            'circle-stroke-width': 1,\n            // Transition from heatmap to circle layer by zoom level\n            'circle-opacity': ['interpolate', ['linear'], ['zoom'], 7, 0, 8, 1]\n          }}\n          before=\"waterway-label\"\n        />\n      </GeoJSONSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Visualize earthquake frequency by location using a heatmap layer."},{name:"GeoJSON\u591a\u8fb9\u5f62",key:"polygonGeoJSON",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Style a polygon with the fill layer type."},{name:"\u5730\u5f62\u9634\u5f71",key:"hillshading",code:'import React, { useRef, useEffect } from \'react\'\nimport { Map, Layer } from \'react-mapbox-ts\'\nimport mapboxConf from \'@/assets/mapbox.conf\'\nimport { ResterDemSource } from \'react-mapbox-ts\'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style="mapbox://styles/mapbox/cjaudgl840gn32rnrepcb9b9g"\n      center={[-119.5591, 37.715]}\n      zoom={9}\n      workercount={100}\n    >\n      <ResterDemSource\n        id="dem"\n        option={{\n          url: \'mapbox://mapbox.terrain-rgb\'\n        }}\n      >\n        <Layer\n          id="hillshading"\n          source="dem"\n          type="hillshade"\n          before="waterway-river-canal-shadow"\n        />\n      </ResterDemSource>\n    </Map>\n  )\n}\nexport default Demo\n',des:"Adds raster hillshading to a map."},{name:"\u6e10\u53d8\u7ebf",key:"gradientLine",code:"import React, { useRef, useEffect } from 'react'\nimport { Map } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  useEffect(() => {}, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={mapboxConf.center}\n      zoom={mapboxConf.zoom}\n      workercount={100}\n    />\n  )\n}\nexport default Demo\n",des:"Use the line-gradient paint property and an expression to visualize distance from the starting point of a line."},{name:"\u591a\u56fe\u5c42\u53e0\u52a0",key:"multipleGeometries",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  const [style, setStyle] = useState('dark-v10')\n  useEffect(() => {\n    setTimeout(() => {\n      setStyle('satellite-v9')\n    }, 5000)\n    setTimeout(() => {\n      setStyle('streets-v11')\n    }, 10000)\n    return () => {}\n  }, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={`mapbox://styles/mapbox/${style}`}\n      center={[-121.415061, 40.506229]}\n      zoom={mapboxConf.zoom}\n      workercount={50}\n    >\n      <GeoJSONSource\n        id=\"national-park\"\n        option={{\n          data: {\n            type: 'FeatureCollection',\n            features: [\n              {\n                type: 'Feature',\n                geometry: {\n                  type: 'Polygon',\n                  coordinates: [\n                    [\n                      [-121.353637, 40.584978],\n                      [-121.284551, 40.584758],\n                      [-121.275349, 40.541646],\n                      [-121.246768, 40.541017],\n                      [-121.251343, 40.423383],\n                      [-121.32687, 40.423768],\n                      [-121.360619, 40.43479],\n                      [-121.363694, 40.409124],\n                      [-121.439713, 40.409197],\n                      [-121.439711, 40.423791],\n                      [-121.572133, 40.423548],\n                      [-121.577415, 40.550766],\n                      [-121.539486, 40.558107],\n                      [-121.520284, 40.572459],\n                      [-121.487219, 40.550822],\n                      [-121.446951, 40.56319],\n                      [-121.370644, 40.563267],\n                      [-121.353637, 40.584978]\n                    ]\n                  ]\n                }\n              },\n              {\n                type: 'Feature',\n                geometry: {\n                  type: 'Point',\n                  coordinates: [-121.415061, 40.506229]\n                }\n              },\n              {\n                type: 'Feature',\n                geometry: {\n                  type: 'Point',\n                  coordinates: [-121.505184, 40.488084]\n                }\n              },\n              {\n                type: 'Feature',\n                geometry: {\n                  type: 'Point',\n                  coordinates: [-121.354465, 40.488737]\n                }\n              }\n            ]\n          }\n        }}\n      >\n        <Layer\n          id=\"park-boundary\"\n          type=\"fill\"\n          source=\"national-park\"\n          paint={{\n            'fill-color': '#888888',\n            'fill-opacity': 0.4\n          }}\n          filter={['==', '$type', 'Polygon']}\n        />\n        {style === 'streets-v11' ? (\n          <Layer\n            id=\"park-volcanoes\"\n            type=\"circle\"\n            source=\"national-park\"\n            paint={{\n              'circle-radius': 6,\n              'circle-color': '#B42222'\n            }}\n            filter={['==', '$type', 'Point']}\n          />\n        ) : null}\n      </GeoJSONSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Add a polygon and circle layer from the same GeoJSON source."},{name:"\u52a8\u6001\u5b9e\u65f6\u6570\u636e",key:"realtime",code:"import React, { useRef, useEffect, useCallback, useState } from 'react'\nimport { Map, GeoJSONSource, Layer } from 'react-mapbox-ts'\nimport mapboxConf from '@/assets/mapbox.conf'\nimport { request } from 'umi'\nimport { LngLatLike } from 'mapbox-gl'\n\ninterface DataParams {\n  data: any\n  size: number\n  center: LngLatLike\n}\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  const url = 'https://wanderdrone.appspot.com/'\n  const [data, setData] = useState<DataParams>({\n    data: null,\n    size: 1,\n    center: [-114.36500971520232, -8.13046865403699]\n  })\n  const intRef = useRef<NodeJS.Timeout>()\n  const sourceRef = useRef<mapboxgl.GeoJSONSource>()\n  const layerRef = useRef<mapboxgl.Layer>()\n  useEffect(() => {\n    intRef.current = setInterval(WsetInterval, 3000)\n    return () => {\n      clearInterval(intRef.current)\n    }\n  }, [])\n  const WsetInterval = useCallback(() => {\n    request(url, { method: 'get' }).then((res) => {\n      setData({\n        data: res,\n        center: res.geometry.coordinates,\n        size: Math.random() * 10 + 1\n      })\n    })\n  }, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      flyToOptions={{ speed: 0.8 }}\n      accessToken={mapboxConf.accessToken}\n      style={mapboxConf.style}\n      center={data.center}\n      zoom={4}\n      workercount={16}\n    >\n      <GeoJSONSource\n        ref={sourceRef}\n        id=\"drone\"\n        option={{ data: data.data || url }}\n      >\n        <Layer\n          ref={layerRef}\n          id=\"layer-id\"\n          type=\"symbol\"\n          source=\"drone\"\n          layout={{\n            'icon-image': 'rocket-15',\n            'icon-size': data.size\n          }}\n        />\n      </GeoJSONSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Use realtime GeoJSON data streams to move a symbol on your map."}]},sources:{title:"\u6e90",items:[{name:"\u77e2\u91cf\u5e73\u94fa\u6e90",key:"vectortile",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport React, { useRef, useState, useEffect } from 'react'\nimport { Map, VectorSource, Layer } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  const [zoom, setZoom] = useState(13)\n  useEffect(() => {\n    setTimeout(() => {\n      setZoom(9)\n    }, 5000)\n  })\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/light-v10\"\n      zoom={11}\n      center={[-122.447303, 37.753574]}\n      workercount={16}\n      minZoom={10}\n    >\n      <VectorSource\n        id=\"mapbox-terrain\"\n        option={{\n          url: 'mapbox://mapbox.mapbox-terrain-v2',\n          minzoom: zoom\n        }}\n      >\n        <Layer\n          id=\"terrain-data\"\n          type=\"line\"\n          source=\"mapbox-terrain\"\n          sourceLayer=\"contour\"\n          layout={{\n            'line-join': 'round',\n            'line-cap': 'round'\n          }}\n          paint={{\n            'line-color': '#ff69b4',\n            'line-width': 1\n          }}\n        />\n      </VectorSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Add a vector source to a map."},{name:"\u753b\u5e03\u6e90",key:"canvas",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { CanvasSource, Layer, Map } from 'react-mapbox-ts'\n\nclass Circle {\n  constructor(\n    x: number,\n    y: number,\n    dx: number,\n    dy: number,\n    radius: number,\n    color: string,\n    ctx: CanvasRenderingContext2D\n  ) {\n    this.x = x\n    this.y = y\n    this.dx = dx\n    this.dy = dy\n    this.radius = radius\n    this.color = color\n    this.ctx = ctx\n  }\n  x: number = 0\n  y: number = 0\n  dx: number = 0\n  dy: number = 0\n  radius: number = 0\n  color: string = ''\n  ctx: CanvasRenderingContext2D\n  draw() {\n    this.ctx.beginPath()\n    this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\n    this.ctx.strokeStyle = this.color\n    this.ctx.stroke()\n  }\n  update() {\n    if (this.x + this.radius > 400 || this.x - this.radius < 0) {\n      this.dx = -this.dx\n    }\n    if (this.y + this.radius > 400 || this.y - this.radius < 0) {\n      this.dy = -this.dy\n    }\n    this.x += this.dx\n    this.y += this.dy\n    this.draw()\n  }\n}\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  const [canvas, setCanvas] = useState<HTMLCanvasElement>()\n  const canvasAnimate = useCallback(() => {\n    const ctx = canvas.getContext('2d')\n    const circles: Circle[] = []\n    const radius = 20\n    for (let i = 0; i < 5; i++) {\n      let color =\n        '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6)\n      let x = Math.random() * (400 - radius * 2) + radius\n      let y = Math.random() * (400 - radius * 2) + radius\n      let dx = (Math.random() - 0.5) * 2\n      let dy = (Math.random() - 0.5) * 2\n      circles.push(new Circle(x, y, dx, dy, radius, color, ctx))\n    }\n    function animate() {\n      requestAnimationFrame(animate)\n      ctx.clearRect(0, 0, 400, 400)\n      for (var r = 0; r < 5; r++) {\n        circles[r].update()\n      }\n    }\n    animate()\n  }, [canvas])\n  useEffect(() => {\n    canvas && canvasAnimate()\n  }, [canvas])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/light-v10\"\n      zoom={5}\n      center={[95.899147, 18.088694]}\n      workercount={16}\n      minZoom={4}\n    >\n      <CanvasSource\n        ref={(e) => {\n          setCanvas(e.canvas)\n        }}\n        id=\"canvas-source\"\n        option={{\n          coordinates: [\n            [91.4461, 21.5006],\n            [100.3541, 21.5006],\n            [100.3541, 13.9706],\n            [91.4461, 13.9706]\n          ],\n          animate: true\n        }}\n      >\n        <Layer id=\"canvas-layer\" type=\"raster\" source=\"canvas-source\" />\n      </CanvasSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Add a canvas source to the map."},{name:"\u56fe\u7247\u6e90",key:"image",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport React, { useRef } from 'react'\nimport { ImageSource, Layer, Map, VectorSource } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        mapRef.current = map\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style={{\n        version: 8,\n        sprite: 'mapbox://sprites/mapbox/dark-v10',\n        glyphs: 'mapbox://fonts/mapbox/{fontstack}/{range}.pbf',\n        sources: {},\n        layers: []\n      }}\n      zoom={5}\n      maxZoom={6}\n      minZoom={4}\n      center={[-75.789, 41.874]}\n      workercount={16}\n    >\n      <Layer\n        id=\"background\"\n        type=\"background\"\n        paint={{\n          'background-color': '#111'\n        }}\n      />\n      <ImageSource\n        id=\"overlay\"\n        option={{\n          url: 'https://docs.mapbox.com/mapbox-gl-js/assets/radar.gif',\n          coordinates: [\n            [-80.425, 46.437],\n            [-71.516, 46.437],\n            [-71.516, 37.936],\n            [-80.425, 37.936]\n          ]\n        }}\n      >\n        <Layer\n          id=\"overlay\"\n          source=\"overlay\"\n          type=\"raster\"\n          paint={{\n            'raster-opacity': 0.85\n          }}\n        />\n      </ImageSource>\n      <VectorSource\n        id=\"mapbox\"\n        option={{ url: 'mapbox://mapbox.mapbox-streets-v8' }}\n      >\n        <Layer\n          id=\"water\"\n          source=\"mapbox\"\n          sourceLayer=\"water\"\n          type=\"fill\"\n          paint={{\n            'fill-color': '#2c2c2c'\n          }}\n        />\n        <Layer\n          id=\"boundaries\"\n          source=\"mapbox\"\n          sourceLayer=\"admin\"\n          type=\"line\"\n          paint={{\n            'line-color': '#797979',\n            'line-dasharray': [2, 2, 6, 2]\n          }}\n          filter={['all', ['==', 'maritime', 0]]}\n        />\n        <Layer\n          id=\"cities\"\n          source=\"mapbox\"\n          sourceLayer=\"place_label\"\n          type=\"symbol\"\n          paint={{\n            'text-color': '#969696',\n            'text-halo-width': 2,\n            'text-halo-color': 'rgba(0, 0, 0, 0.85)'\n          }}\n          layout={{\n            'text-field': '{name_en}',\n            'text-font': ['DIN Offc Pro Bold', 'Arial Unicode MS Bold'],\n            'text-size': ['interpolate', ['linear'], ['zoom'], 4, 9, 6, 12]\n          }}\n        />\n        <Layer\n          id=\"states\"\n          source=\"mapbox\"\n          sourceLayer=\"place_label\"\n          type=\"symbol\"\n          paint={{\n            'text-color': '#969696',\n            'text-halo-width': 2,\n            'text-halo-color': 'rgba(0, 0, 0, 0.85)'\n          }}\n          layout={{\n            'text-transform': 'uppercase',\n            'text-field': '{name_en}',\n            'text-font': ['DIN Offc Pro Bold', 'Arial Unicode MS Bold'],\n            'text-letter-spacing': 0.15,\n            'text-max-width': 7,\n            'text-size': ['interpolate', ['linear'], ['zoom'], 4, 10, 6, 14]\n          }}\n          filter={['==', ['get', 'class'], 'state']}\n        />\n      </VectorSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Dark vector baselayer with radar weather image overlay."},{name:"\u89c6\u9891\u6e90",key:"video",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport React, { useRef, useCallback } from 'react'\nimport { Layer, Map, VideoSource, VideoSourcePlus } from 'react-mapbox-ts'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  const videoRef = useRef<VideoSourcePlus>()\n  const playRef = useRef(true)\n  const videoClick = useCallback(() => {\n    if (playRef.current) {\n      videoRef.current.pause()\n    } else {\n      videoRef.current.play()\n    }\n    playRef.current = !playRef.current\n  }, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/satellite-v9\"\n      zoom={17}\n      center={[-122.514426, 37.562984]}\n      workercount={16}\n      bearing={-96}\n      minZoom={14}\n      onClick={videoClick}\n    >\n      <VideoSource\n        ref={(e) => {\n          videoRef.current = e\n        }}\n        id=\"video\"\n        option={{\n          urls: [\n            'https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4',\n            'https://static-assets.mapbox.com/mapbox-gl-js/drone.webm'\n          ],\n          coordinates: [\n            [-122.51596391201019, 37.56238816766053],\n            [-122.51467645168304, 37.56410183312965],\n            [-122.51309394836426, 37.563391708549425],\n            [-122.51423120498657, 37.56161849366671]\n          ]\n        }}\n      >\n        <Layer id=\"video\" type=\"raster\" source=\"video\" />\n      </VideoSource>\n    </Map>\n  )\n}\nexport default Demo\n",des:"Satellite raster baselayer with video on top. Click on the map to play and pause."},{name:"WMS/WMTS\u6e90",key:"wmts",code:"import { Map, RasterSource, Layer } from 'react-mapbox-ts'\nimport { Radio } from 'antd'\nimport React, { useCallback, useState, useMemo } from 'react'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport mapboxConf from '@/assets/mapbox.conf'\nimport wmsData from '@/assets/wms.data'\n\nconst keys = Object.keys(wmsData)\nexport default () => {\n  const [index, setIndex] = useState(0)\n  const StyleChange = useCallback((e: RadioChangeEvent) => {\n    setIndex(e.target.value)\n  }, [])\n  const { name, ...config } = useMemo(() => wmsData[keys[index]], [index])\n  return (\n    <div className=\"full\">\n      <Map\n        // ref={mapRef}\n        ref={(map) => {\n          window.map = map\n        }}\n        accessToken={mapboxConf.accessToken}\n        style={{\n          version: 8,\n          sources: {},\n          layers: []\n        }}\n        center={mapboxConf.center}\n        zoom={mapboxConf.zoom}\n        maxZoom={config.maxzoom}\n        minZoom={config.minzoom}\n      >\n        <RasterSource\n          id=\"raster-tiles\"\n          option={{\n            tiles: config.tiles,\n            tileSize: config.tileSize || 256,\n            attribution: config.attribution || ''\n          }}\n        >\n          <Layer id=\"raster-layer\" source=\"raster-tiles\" type=\"raster\" />\n        </RasterSource>\n      </Map>\n      <div style={{ position: 'absolute', top: 8 }}>\n        <Radio.Group\n          defaultValue={0}\n          onChange={StyleChange}\n          buttonStyle=\"solid\"\n        >\n          {keys.map((item, index) => {\n            return (\n              <Radio.Button key={`${item}-btn`} value={index}>\n                {wmsData[item].name}\n              </Radio.Button>\n            )\n          })}\n        </Radio.Group>\n      </div>\n    </div>\n  )\n}\n",des:"Adding an external Web Map Service layer to the map."},{name:"\u5b9e\u65f6\u66f4\u65b0\u6e90",key:"realtimeUpdate",code:"import mapboxConf from '@/assets/mapbox.conf'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { GeoJSONSource, Layer, Map } from 'react-mapbox-ts'\nimport { request } from 'umi'\n\nconst Demo: React.FC = () => {\n  const mapRef = useRef<mapboxgl.Map>()\n  const [data, setData] = useState<any>()\n  const allAata = useRef<any[]>()\n  const aniRef = useRef<NodeJS.Timeout>()\n\n  useEffect(() => {\n    if (!data) return\n    const sendData = { ...data }\n    aniRef.current = setTimeout(() => {\n      if (!!allAata.current[0]) {\n        sendData.features[0].geometry.coordinates.push(allAata.current[0])\n        setData(sendData)\n        mapRef.current.panTo(allAata.current[0])\n        allAata.current.shift()\n      } else {\n        clearInterval(aniRef.current)\n      }\n    }, 10)\n  }, [data])\n\n  useEffect(() => {\n    request('https://docs.mapbox.com/mapbox-gl-js/assets/hike.geojson').then(\n      (res) => {\n        allAata.current = res.features[0].geometry.coordinates\n        res.features[0].geometry.coordinates = [allAata.current[0]]\n        setData(res)\n        mapRef.current\n          .jumpTo({ center: allAata.current[0], zoom: 14 })\n          .setPitch(30)\n      }\n    )\n    return () => {\n      clearInterval(aniRef.current)\n    }\n  }, [])\n  return (\n    <Map\n      // ref={mapRef}\n      ref={(map) => {\n        mapRef.current = map\n        window.map = map\n      }}\n      accessToken={mapboxConf.accessToken}\n      style=\"mapbox://styles/mapbox/satellite-v9\"\n      zoom={0}\n      center={[-122.514426, 37.562984]}\n      workercount={16}\n    >\n      {!!data && (\n        <GeoJSONSource\n          id=\"trace\"\n          option={{\n            data: data\n          }}\n        >\n          <Layer\n            id=\"trace\"\n            type=\"line\"\n            source=\"trace\"\n            paint={{\n              'line-color': 'yellow',\n              'line-opacity': 0.75,\n              'line-width': 5\n            }}\n          />\n        </GeoJSONSource>\n      )}\n    </Map>\n  )\n}\nexport default Demo\n",des:"Change an existing feature on your map in realtime by updating its data."}]}},l=t("xtQj"),u=t("gnQV"),d=t("su5N"),f=t("q1tI"),y=t.n(f),x=t("LtsZ"),S=(t("ZQDC"),c["a"].Sider),g=c["a"].Content,b=i["a"].Item,h=i["a"].SubMenu,j=(s["a"].Title,()=>{var n=Object(f["useState"])("style-map"),e=Object(r["a"])(n,2),s=e[0],j=e[1],_=Object(f["useState"])(!1),C=Object(r["a"])(_,2),R=C[0],k=C[1],E=Object(f["useState"])(!1),M=Object(r["a"])(E,2),w=M[0],v=M[1],L=Object(f["useMemo"])(()=>s.split("-"),[s]),T=Object(r["a"])(L,2),P=T[0],O=T[1],D=Object(f["useMemo"])(()=>m[P].items.find(n=>(null===n||void 0===n?void 0:n.key)===O),[s]),G=Object(f["useCallback"])(()=>Object(x["dynamic"])({loader:()=>t("x61t")("./demos.".concat(P,".").concat(O)),loading:t("97+D").default,delay:400}),[s]),B=Object(f["useCallback"])(n=>{j(n.key),v(!1)},[]),z=Object(f["useCallback"])(()=>{setTimeout(()=>{window.map.resize()},300),k(!R)},[R]),A=Object(f["useCallback"])(()=>{v(!w),setTimeout(()=>{window.map.resize()},300)},[w]),N=Object(f["useMemo"])(()=>G(),[s]);return y.a.createElement(c["a"],{id:"DemosPage"},y.a.createElement(S,{theme:"light",className:"menu-side",width:R?0:300},y.a.createElement(i["a"],{mode:"inline",selectedKeys:[s],onClick:B,defaultOpenKeys:["style-group"]},Object.keys(m).map(n=>{var e=m[n];return y.a.createElement(h,{key:"".concat(n,"-group"),title:e.title},e.items.map(e=>y.a.createElement(b,{key:"".concat(n,"-").concat(e.key)},e.name)))}))),y.a.createElement(g,{className:"demos-content-wrap"},y.a.createElement("div",{className:"demos-content"},y.a.createElement(a["a"],{backIcon:R?y.a.createElement(l["a"],null):y.a.createElement(u["a"],null),className:"content-header",onBack:z,title:D.name,subTitle:D.des,extra:y.a.createElement(o["a"],{type:"link",icon:y.a.createElement(d["a"],null),onClick:A},w?"\u9690\u85cf":"\u663e\u793a","\u4ee3\u7801")}),y.a.createElement("div",{className:"demos-live"},y.a.createElement(p["a"],{viewCode:w,code:D.code,preview:y.a.createElement(N,null)})))))});e["default"]=j},PML8:function(n,e,t){var a={"./Binary_Property/ASCII.js":"TTPM","./Binary_Property/ASCII_Hex_Digit.js":"rKZ+","./Binary_Property/Alphabetic.js":"PYyx","./Binary_Property/Any.js":"hfac","./Binary_Property/Assigned.js":"2TvA","./Binary_Property/Bidi_Control.js":"BIHX","./Binary_Property/Bidi_Mirrored.js":"Y6X3","./Binary_Property/Case_Ignorable.js":"YL52","./Binary_Property/Cased.js":"hHg9","./Binary_Property/Changes_When_Casefolded.js":"xB3T","./Binary_Property/Changes_When_Casemapped.js":"1N+G","./Binary_Property/Changes_When_Lowercased.js":"v51b","./Binary_Property/Changes_When_NFKC_Casefolded.js":"ayZG","./Binary_Property/Changes_When_Titlecased.js":"IMPD","./Binary_Property/Changes_When_Uppercased.js":"R1Ew","./Binary_Property/Dash.js":"+3kn","./Binary_Property/Default_Ignorable_Code_Point.js":"4/F7","./Binary_Property/Deprecated.js":"wZUC","./Binary_Property/Diacritic.js":"s0pm","./Binary_Property/Emoji.js":"12hi","./Binary_Property/Emoji_Component.js":"mzUC","./Binary_Property/Emoji_Modifier.js":"0nmF","./Binary_Property/Emoji_Modifier_Base.js":"+hQC","./Binary_Property/Emoji_Presentation.js":"ep7J","./Binary_Property/Extended_Pictographic.js":"gx40","./Binary_Property/Extender.js":"jq6q","./Binary_Property/Grapheme_Base.js":"ojcp","./Binary_Property/Grapheme_Extend.js":"V3uO","./Binary_Property/Hex_Digit.js":"4YcT","./Binary_Property/IDS_Binary_Operator.js":"KgQe","./Binary_Property/IDS_Trinary_Operator.js":"rZx1","./Binary_Property/ID_Continue.js":"Z3Cz","./Binary_Property/ID_Start.js":"/VW1","./Binary_Property/Ideographic.js":"VdHZ","./Binary_Property/Join_Control.js":"6XJR","./Binary_Property/Logical_Order_Exception.js":"18Iv","./Binary_Property/Lowercase.js":"RlPj","./Binary_Property/Math.js":"ZtX9","./Binary_Property/Noncharacter_Code_Point.js":"IZLa","./Binary_Property/Pattern_Syntax.js":"YNcp","./Binary_Property/Pattern_White_Space.js":"pLr0","./Binary_Property/Quotation_Mark.js":"bVt1","./Binary_Property/Radical.js":"V6iA","./Binary_Property/Regional_Indicator.js":"gXbN","./Binary_Property/Sentence_Terminal.js":"yNbx","./Binary_Property/Soft_Dotted.js":"TP4o","./Binary_Property/Terminal_Punctuation.js":"SPrB","./Binary_Property/Unified_Ideograph.js":"lqdz","./Binary_Property/Uppercase.js":"wJ4O","./Binary_Property/Variation_Selector.js":"zYVL","./Binary_Property/White_Space.js":"mCz8","./Binary_Property/XID_Continue.js":"7jO/","./Binary_Property/XID_Start.js":"CkxS","./General_Category/Cased_Letter.js":"JTjc","./General_Category/Close_Punctuation.js":"LZZ3","./General_Category/Connector_Punctuation.js":"J7in","./General_Category/Control.js":"ZKzb","./General_Category/Currency_Symbol.js":"S/gH","./General_Category/Dash_Punctuation.js":"OQyL","./General_Category/Decimal_Number.js":"yyEx","./General_Category/Enclosing_Mark.js":"aBVj","./General_Category/Final_Punctuation.js":"K9hv","./General_Category/Format.js":"Ohg8","./General_Category/Initial_Punctuation.js":"DusV","./General_Category/Letter.js":"PVUd","./General_Category/Letter_Number.js":"/soj","./General_Category/Line_Separator.js":"oOya","./General_Category/Lowercase_Letter.js":"PeYj","./General_Category/Mark.js":"yxwC","./General_Category/Math_Symbol.js":"owBG","./General_Category/Modifier_Letter.js":"6oKa","./General_Category/Modifier_Symbol.js":"OMsT","./General_Category/Nonspacing_Mark.js":"ezlQ","./General_Category/Number.js":"0vCW","./General_Category/Open_Punctuation.js":"JpfW","./General_Category/Other.js":"BG0k","./General_Category/Other_Letter.js":"v+A9","./General_Category/Other_Number.js":"l/XR","./General_Category/Other_Punctuation.js":"oeGF","./General_Category/Other_Symbol.js":"5xM+","./General_Category/Paragraph_Separator.js":"TveE","./General_Category/Private_Use.js":"GS9R","./General_Category/Punctuation.js":"CmM2","./General_Category/Separator.js":"HpTs","./General_Category/Space_Separator.js":"Buer","./General_Category/Spacing_Mark.js":"9wuW","./General_Category/Surrogate.js":"vudz","./General_Category/Symbol.js":"/dLw","./General_Category/Titlecase_Letter.js":"3O+O","./General_Category/Unassigned.js":"QXET","./General_Category/Uppercase_Letter.js":"rqE6","./Script/Adlam.js":"Wry+","./Script/Ahom.js":"GsYE","./Script/Anatolian_Hieroglyphs.js":"dOYW","./Script/Arabic.js":"FvNL","./Script/Armenian.js":"/yAK","./Script/Avestan.js":"GcGr","./Script/Balinese.js":"LAM2","./Script/Bamum.js":"7V9v","./Script/Bassa_Vah.js":"kBqS","./Script/Batak.js":"Jx5A","./Script/Bengali.js":"fjIA","./Script/Bhaiksuki.js":"2vIc","./Script/Bopomofo.js":"HLRT","./Script/Brahmi.js":"bntx","./Script/Braille.js":"6O1M","./Script/Buginese.js":"JFG7","./Script/Buhid.js":"wnaP","./Script/Canadian_Aboriginal.js":"OZnc","./Script/Carian.js":"V8Tt","./Script/Caucasian_Albanian.js":"WR1s","./Script/Chakma.js":"vvaZ","./Script/Cham.js":"BrKN","./Script/Cherokee.js":"1CAE","./Script/Chorasmian.js":"Sgk+","./Script/Common.js":"A5PK","./Script/Coptic.js":"HGcO","./Script/Cuneiform.js":"8PCV","./Script/Cypriot.js":"PVma","./Script/Cyrillic.js":"6axZ","./Script/Deseret.js":"OTnk","./Script/Devanagari.js":"hSpq","./Script/Dives_Akuru.js":"Hv6T","./Script/Dogra.js":"D+nV","./Script/Duployan.js":"juuj","./Script/Egyptian_Hieroglyphs.js":"6wcF","./Script/Elbasan.js":"xKmi","./Script/Elymaic.js":"KDQ6","./Script/Ethiopic.js":"ec/7","./Script/Georgian.js":"h4fK","./Script/Glagolitic.js":"hTB4","./Script/Gothic.js":"lazI","./Script/Grantha.js":"gwxh","./Script/Greek.js":"9ulf","./Script/Gujarati.js":"wQeB","./Script/Gunjala_Gondi.js":"N7XW","./Script/Gurmukhi.js":"TQJj","./Script/Han.js":"9H9O","./Script/Hangul.js":"jLBR","./Script/Hanifi_Rohingya.js":"/I8K","./Script/Hanunoo.js":"P0BJ","./Script/Hatran.js":"duBa","./Script/Hebrew.js":"uT2Q","./Script/Hiragana.js":"edsp","./Script/Imperial_Aramaic.js":"61NE","./Script/Inherited.js":"Umia","./Script/Inscriptional_Pahlavi.js":"nwfO","./Script/Inscriptional_Parthian.js":"vAm1","./Script/Javanese.js":"477v","./Script/Kaithi.js":"4172","./Script/Kannada.js":"hUzA","./Script/Katakana.js":"V+/M","./Script/Kayah_Li.js":"a0Op","./Script/Kharoshthi.js":"IxPn","./Script/Khitan_Small_Script.js":"dP5d","./Script/Khmer.js":"QX2T","./Script/Khojki.js":"Eo24","./Script/Khudawadi.js":"+QyN","./Script/Lao.js":"7oRX","./Script/Latin.js":"dN2w","./Script/Lepcha.js":"5bsx","./Script/Limbu.js":"u9lQ","./Script/Linear_A.js":"5scg","./Script/Linear_B.js":"WPcv","./Script/Lisu.js":"aE84","./Script/Lycian.js":"/qLS","./Script/Lydian.js":"lyes","./Script/Mahajani.js":"uwDI","./Script/Makasar.js":"jdFt","./Script/Malayalam.js":"HYoX","./Script/Mandaic.js":"bcGR","./Script/Manichaean.js":"/pZ2","./Script/Marchen.js":"LqhL","./Script/Masaram_Gondi.js":"p1v9","./Script/Medefaidrin.js":"z0Ef","./Script/Meetei_Mayek.js":"IrW+","./Script/Mende_Kikakui.js":"xEZB","./Script/Meroitic_Cursive.js":"Hu3I","./Script/Meroitic_Hieroglyphs.js":"wgmE","./Script/Miao.js":"kd9n","./Script/Modi.js":"cU+8","./Script/Mongolian.js":"tUQf","./Script/Mro.js":"5eRf","./Script/Multani.js":"MG+M","./Script/Myanmar.js":"kiIX","./Script/Nabataean.js":"Uyem","./Script/Nandinagari.js":"9Z7h","./Script/New_Tai_Lue.js":"owni","./Script/Newa.js":"v4Ei","./Script/Nko.js":"whKM","./Script/Nushu.js":"S/lv","./Script/Nyiakeng_Puachue_Hmong.js":"Dpr8","./Script/Ogham.js":"fdhu","./Script/Ol_Chiki.js":"F8j9","./Script/Old_Hungarian.js":"CD0r","./Script/Old_Italic.js":"xaC0","./Script/Old_North_Arabian.js":"twGC","./Script/Old_Permic.js":"2+yD","./Script/Old_Persian.js":"M9F6","./Script/Old_Sogdian.js":"jWEa","./Script/Old_South_Arabian.js":"F0lk","./Script/Old_Turkic.js":"xqwB","./Script/Oriya.js":"uEWo","./Script/Osage.js":"1n5g","./Script/Osmanya.js":"SZfN","./Script/Pahawh_Hmong.js":"RMPE","./Script/Palmyrene.js":"UVpH","./Script/Pau_Cin_Hau.js":"MNEN","./Script/Phags_Pa.js":"NhNr","./Script/Phoenician.js":"34Qh","./Script/Psalter_Pahlavi.js":"SzA2","./Script/Rejang.js":"dC9X","./Script/Runic.js":"t4pw","./Script/Samaritan.js":"pPeY","./Script/Saurashtra.js":"m7G6","./Script/Sharada.js":"NcVZ","./Script/Shavian.js":"RI8b","./Script/Siddham.js":"ASKt","./Script/SignWriting.js":"2JK7","./Script/Sinhala.js":"LZTu","./Script/Sogdian.js":"NpMe","./Script/Sora_Sompeng.js":"Ng/I","./Script/Soyombo.js":"6JnI","./Script/Sundanese.js":"pyWQ","./Script/Syloti_Nagri.js":"LBZI","./Script/Syriac.js":"hy24","./Script/Tagalog.js":"9H8i","./Script/Tagbanwa.js":"sI65","./Script/Tai_Le.js":"nFf/","./Script/Tai_Tham.js":"isMi","./Script/Tai_Viet.js":"IpiY","./Script/Takri.js":"Rqf3","./Script/Tamil.js":"mdlW","./Script/Tangut.js":"n4XR","./Script/Telugu.js":"xlHm","./Script/Thaana.js":"DGa8","./Script/Thai.js":"OQG6","./Script/Tibetan.js":"MYbx","./Script/Tifinagh.js":"ZAyF","./Script/Tirhuta.js":"ojjd","./Script/Ugaritic.js":"kcLn","./Script/Vai.js":"5EYo","./Script/Wancho.js":"IAU5","./Script/Warang_Citi.js":"JUhp","./Script/Yezidi.js":"16uS","./Script/Yi.js":"t4zZ","./Script/Zanabazar_Square.js":"0Z/U","./Script_Extensions/Adlam.js":"mdLn","./Script_Extensions/Ahom.js":"n75q","./Script_Extensions/Anatolian_Hieroglyphs.js":"MHIA","./Script_Extensions/Arabic.js":"1ygP","./Script_Extensions/Armenian.js":"v1yY","./Script_Extensions/Avestan.js":"YulU","./Script_Extensions/Balinese.js":"S+sJ","./Script_Extensions/Bamum.js":"6Ik7","./Script_Extensions/Bassa_Vah.js":"KRcP","./Script_Extensions/Batak.js":"zSGR","./Script_Extensions/Bengali.js":"AyyQ","./Script_Extensions/Bhaiksuki.js":"1ont","./Script_Extensions/Bopomofo.js":"JQ99","./Script_Extensions/Brahmi.js":"jaDh","./Script_Extensions/Braille.js":"lnBL","./Script_Extensions/Buginese.js":"rGMh","./Script_Extensions/Buhid.js":"wcex","./Script_Extensions/Canadian_Aboriginal.js":"uSeW","./Script_Extensions/Carian.js":"zMEA","./Script_Extensions/Caucasian_Albanian.js":"FJfz","./Script_Extensions/Chakma.js":"9LXj","./Script_Extensions/Cham.js":"sceD","./Script_Extensions/Cherokee.js":"5TAg","./Script_Extensions/Chorasmian.js":"jzOb","./Script_Extensions/Common.js":"2rse","./Script_Extensions/Coptic.js":"o3Hh","./Script_Extensions/Cuneiform.js":"Piar","./Script_Extensions/Cypriot.js":"Md75","./Script_Extensions/Cyrillic.js":"CfQf","./Script_Extensions/Deseret.js":"BSjU","./Script_Extensions/Devanagari.js":"uEkq","./Script_Extensions/Dives_Akuru.js":"qtun","./Script_Extensions/Dogra.js":"6hTu","./Script_Extensions/Duployan.js":"rTvz","./Script_Extensions/Egyptian_Hieroglyphs.js":"zIrX","./Script_Extensions/Elbasan.js":"iJwc","./Script_Extensions/Elymaic.js":"SAe1","./Script_Extensions/Ethiopic.js":"oT1F","./Script_Extensions/Georgian.js":"p6v3","./Script_Extensions/Glagolitic.js":"eSoS","./Script_Extensions/Gothic.js":"0h7X","./Script_Extensions/Grantha.js":"a8VH","./Script_Extensions/Greek.js":"T9DP","./Script_Extensions/Gujarati.js":"olBg","./Script_Extensions/Gunjala_Gondi.js":"/Hxr","./Script_Extensions/Gurmukhi.js":"9jCe","./Script_Extensions/Han.js":"VqP8","./Script_Extensions/Hangul.js":"RHGG","./Script_Extensions/Hanifi_Rohingya.js":"dbxg","./Script_Extensions/Hanunoo.js":"8Gun","./Script_Extensions/Hatran.js":"6Ls2","./Script_Extensions/Hebrew.js":"6gQq","./Script_Extensions/Hiragana.js":"i6W2","./Script_Extensions/Imperial_Aramaic.js":"8goA","./Script_Extensions/Inherited.js":"TgRP","./Script_Extensions/Inscriptional_Pahlavi.js":"m1ma","./Script_Extensions/Inscriptional_Parthian.js":"lERh","./Script_Extensions/Javanese.js":"xn3E","./Script_Extensions/Kaithi.js":"K1Le","./Script_Extensions/Kannada.js":"sR9r","./Script_Extensions/Katakana.js":"MpeM","./Script_Extensions/Kayah_Li.js":"EkIy","./Script_Extensions/Kharoshthi.js":"73FR","./Script_Extensions/Khitan_Small_Script.js":"suAS","./Script_Extensions/Khmer.js":"jRTF","./Script_Extensions/Khojki.js":"6zB/","./Script_Extensions/Khudawadi.js":"GI2u","./Script_Extensions/Lao.js":"PQ0K","./Script_Extensions/Latin.js":"2BBF","./Script_Extensions/Lepcha.js":"tF1p","./Script_Extensions/Limbu.js":"zyj0","./Script_Extensions/Linear_A.js":"lFV7","./Script_Extensions/Linear_B.js":"jawv","./Script_Extensions/Lisu.js":"qzaw","./Script_Extensions/Lycian.js":"wqYY","./Script_Extensions/Lydian.js":"n+Zh","./Script_Extensions/Mahajani.js":"z8DC","./Script_Extensions/Makasar.js":"RNCu","./Script_Extensions/Malayalam.js":"wtBk","./Script_Extensions/Mandaic.js":"untw","./Script_Extensions/Manichaean.js":"n1Oh","./Script_Extensions/Marchen.js":"8fW5","./Script_Extensions/Masaram_Gondi.js":"JBN+","./Script_Extensions/Medefaidrin.js":"02tC","./Script_Extensions/Meetei_Mayek.js":"PoXS","./Script_Extensions/Mende_Kikakui.js":"7jK8","./Script_Extensions/Meroitic_Cursive.js":"U8oa","./Script_Extensions/Meroitic_Hieroglyphs.js":"WAkd","./Script_Extensions/Miao.js":"G1tY","./Script_Extensions/Modi.js":"HwGp","./Script_Extensions/Mongolian.js":"WGqn","./Script_Extensions/Mro.js":"UQmg","./Script_Extensions/Multani.js":"WfgX","./Script_Extensions/Myanmar.js":"bqHw","./Script_Extensions/Nabataean.js":"pjPY","./Script_Extensions/Nandinagari.js":"ObV2","./Script_Extensions/New_Tai_Lue.js":"ZsYH","./Script_Extensions/Newa.js":"5tk3","./Script_Extensions/Nko.js":"/kDM","./Script_Extensions/Nushu.js":"JSPL","./Script_Extensions/Nyiakeng_Puachue_Hmong.js":"xsuf","./Script_Extensions/Ogham.js":"2PVI","./Script_Extensions/Ol_Chiki.js":"NTOk","./Script_Extensions/Old_Hungarian.js":"IK5f","./Script_Extensions/Old_Italic.js":"VHj/","./Script_Extensions/Old_North_Arabian.js":"XcdB","./Script_Extensions/Old_Permic.js":"kp9+","./Script_Extensions/Old_Persian.js":"kAvF","./Script_Extensions/Old_Sogdian.js":"oml3","./Script_Extensions/Old_South_Arabian.js":"F3Lr","./Script_Extensions/Old_Turkic.js":"ZaWa","./Script_Extensions/Oriya.js":"MA0n","./Script_Extensions/Osage.js":"i1w3","./Script_Extensions/Osmanya.js":"EVgB","./Script_Extensions/Pahawh_Hmong.js":"EJMw","./Script_Extensions/Palmyrene.js":"kCFO","./Script_Extensions/Pau_Cin_Hau.js":"96ys","./Script_Extensions/Phags_Pa.js":"jca9","./Script_Extensions/Phoenician.js":"sMr2","./Script_Extensions/Psalter_Pahlavi.js":"yP4Y","./Script_Extensions/Rejang.js":"AkQd","./Script_Extensions/Runic.js":"Dm2Y","./Script_Extensions/Samaritan.js":"zWlK","./Script_Extensions/Saurashtra.js":"wOBA","./Script_Extensions/Sharada.js":"idKo","./Script_Extensions/Shavian.js":"Wp8k","./Script_Extensions/Siddham.js":"0OBK","./Script_Extensions/SignWriting.js":"mJRM","./Script_Extensions/Sinhala.js":"7xP4","./Script_Extensions/Sogdian.js":"9VM+","./Script_Extensions/Sora_Sompeng.js":"jM+1","./Script_Extensions/Soyombo.js":"ZSfS","./Script_Extensions/Sundanese.js":"xs8s","./Script_Extensions/Syloti_Nagri.js":"X29h","./Script_Extensions/Syriac.js":"HUGt","./Script_Extensions/Tagalog.js":"9/o/","./Script_Extensions/Tagbanwa.js":"Cw5x","./Script_Extensions/Tai_Le.js":"64uU","./Script_Extensions/Tai_Tham.js":"7GeA","./Script_Extensions/Tai_Viet.js":"wA4O","./Script_Extensions/Takri.js":"MSEK","./Script_Extensions/Tamil.js":"+XeO","./Script_Extensions/Tangut.js":"X2h1","./Script_Extensions/Telugu.js":"a37I","./Script_Extensions/Thaana.js":"YXr4","./Script_Extensions/Thai.js":"9mTJ","./Script_Extensions/Tibetan.js":"hQqI","./Script_Extensions/Tifinagh.js":"MBkK","./Script_Extensions/Tirhuta.js":"wmPc","./Script_Extensions/Ugaritic.js":"tgrt","./Script_Extensions/Vai.js":"cyPN","./Script_Extensions/Wancho.js":"ELeP","./Script_Extensions/Warang_Citi.js":"JEgC","./Script_Extensions/Yezidi.js":"8nCx","./Script_Extensions/Yi.js":"CnAY","./Script_Extensions/Zanabazar_Square.js":"Xx7p","./index.js":"aAIp","./unicode-version.js":"9NKt"};function o(n){var e=r(n);return t(e)}function r(n){if(!t.o(a,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return a[n]}o.keys=function(){return Object.keys(a)},o.resolve=r,n.exports=o,o.id="PML8"},ZQDC:function(n,e,t){},cG0u:function(n,e,t){},vn4u:function(n,e,t){"use strict";t("14J3");var a=t("BMrR"),o=(t("jCWc"),t("kPKH")),r=t("q1tI"),s=t.n(r),i=t("hJ+y"),c=(t("cG0u"),n=>{var e=n.code,t=n.scope,r=n.disabled,c=n.preview,p=n.noInline,m=void 0===p||p,l=n.viewCode,u=void 0===l||l;return s.a.createElement(i["d"],{code:e,noInline:!c&&m,scope:t,language:"typescript",theme:{plain:{color:"#e7d2ed"},styles:[{types:["prolog","comment","doctype","cdata"],style:{color:"hsl(30, 20%, 50%)"}},{types:["property","tag","boolean","number","constant","symbol"],style:{color:"#f677e1"}},{types:["attr-name","string","char","builtin","insterted"],style:{color:"hsl(75, 70%, 70%)"}},{types:["operator","entity","url","string","variable","language-css"],style:{color:"hsl(40, 90%, 70%)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["regex","important"],style:{color:"#e90"}},{types:["atrule","attr-value","keyword"],style:{color:"#f677e1"}},{types:["punctuation","symbol"],style:{opacity:.7}}]}},s.a.createElement(a["a"],{id:"LiveCode",justify:"space-between"},s.a.createElement(o["a"],{className:"codebox"},s.a.createElement(a["a"],{className:"wrap"},s.a.createElement(o["a"],{xs:u?24:0,lg:u?12:0,className:"editor"},s.a.createElement(i["a"],{disabled:!!r||!!c,style:{display:u?"block":"none"}})),s.a.createElement(o["a"],{className:"preview",xs:24,lg:u?12:24},c||s.a.createElement(i["c"],null)))),s.a.createElement(o["a"],{className:"error",hidden:!!c},s.a.createElement(i["b"],null))))});e["a"]=c},x61t:function(n,e,t){var a={"./demos.layers.animatedIcon":["3iCg",43],"./demos.layers.animatedIcon.tsx":["3iCg",43],"./demos.layers.bigDataCircles":["Aevh",0,9],"./demos.layers.bigDataCircles.tsx":["Aevh",0,9],"./demos.layers.buildings3D":["7YGH",0,10],"./demos.layers.buildings3D.tsx":["7YGH",0,10],"./demos.layers.clusters":["p+rc",0,11],"./demos.layers.clusters.tsx":["p+rc",0,11],"./demos.layers.customLayer":["efQS",0,12],"./demos.layers.customLayer.tsx":["efQS",0,12],"./demos.layers.gifPic":["Zjmj",0,13],"./demos.layers.gifPic.tsx":["Zjmj",0,13],"./demos.layers.gradientLine":["6ees",0,14],"./demos.layers.gradientLine.tsx":["6ees",0,14],"./demos.layers.heatmap":["Y6BE",0,15],"./demos.layers.heatmap.tsx":["Y6BE",0,15],"./demos.layers.hillshading":["I1bx",0,16],"./demos.layers.hillshading.tsx":["I1bx",0,16],"./demos.layers.indoor3D":["yEt5",0,17],"./demos.layers.indoor3D.tsx":["yEt5",0,17],"./demos.layers.labelsLayer":["+82d",0,18],"./demos.layers.labelsLayer.tsx":["+82d",0,18],"./demos.layers.lineAnimate":["RN1p",0,19],"./demos.layers.lineAnimate.tsx":["RN1p",0,19],"./demos.layers.lineGeoJSON":["HQrQ",0,20],"./demos.layers.lineGeoJSON.tsx":["HQrQ",0,20],"./demos.layers.model3D":["srO/",0,42,21],"./demos.layers.model3D.tsx":["srO/",0,42,21],"./demos.layers.multipleGeometries":["KUZP",0,22],"./demos.layers.multipleGeometries.tsx":["KUZP",0,22],"./demos.layers.opacityLayer":["snnj",0,6,23],"./demos.layers.opacityLayer.tsx":["snnj",0,6,23],"./demos.layers.pointAnimate":["mdPX",0,24],"./demos.layers.pointAnimate.tsx":["mdPX",0,24],"./demos.layers.pointGeoJSON":["jXtE",0,25],"./demos.layers.pointGeoJSON.tsx":["jXtE",0,25],"./demos.layers.polygonGeoJSON":["i5jO",0,26],"./demos.layers.polygonGeoJSON.tsx":["i5jO",0,26],"./demos.layers.polygonPic":["GyiS",0,27],"./demos.layers.polygonPic.tsx":["GyiS",0,27],"./demos.layers.realtime":["a4f4",0,2,7],"./demos.layers.realtime.tsx":["a4f4",0,2,7],"./demos.layers.styleClusters":["dTKC",0,28],"./demos.layers.styleClusters.tsx":["dTKC",0,28],"./demos.layers.textStyle":["hHQm",0,29],"./demos.layers.textStyle.tsx":["hHQm",0,29],"./demos.sources.canvas":["2jTx",0,30],"./demos.sources.canvas.tsx":["2jTx",0,30],"./demos.sources.image":["fKow",0,31],"./demos.sources.image.tsx":["fKow",0,31],"./demos.sources.realtimeUpdate":["0R3L",0,2,8],"./demos.sources.realtimeUpdate.tsx":["0R3L",0,2,8],"./demos.sources.vectortile":["Q5Kw",0,32],"./demos.sources.vectortile.tsx":["Q5Kw",0,32],"./demos.sources.video":["gdnd",0,33],"./demos.sources.video.tsx":["gdnd",0,33],"./demos.sources.wmts":["uR4u",0,1,34],"./demos.sources.wmts.tsx":["uR4u",0,1,34],"./demos.style.animatedIcon":["yJ2Q",0,35],"./demos.style.animatedIcon.tsx":["yJ2Q",0,35],"./demos.style.changeStyle":["HAsV",0,1,36],"./demos.style.changeStyle.tsx":["HAsV",0,1,36],"./demos.style.generatedIcon":["MUQv",0,37],"./demos.style.generatedIcon.tsx":["MUQv",0,37],"./demos.style.map":["5QNf",0,38],"./demos.style.map.tsx":["5QNf",0,38],"./demos.style.marker":["mPTG",0,39],"./demos.style.marker.tsx":["mPTG",0,39],"./demos.style.picIcon":["ywmw",0,40],"./demos.style.picIcon.tsx":["ywmw",0,40],"./demos.style.worldCopies":["QQCg",0,1,41],"./demos.style.worldCopies.tsx":["QQCg",0,1,41]};function o(n){if(!t.o(a,n))return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}));var e=a[n],o=e[0];return Promise.all(e.slice(1).map(t.e)).then((function(){return t(o)}))}o.keys=function(){return Object.keys(a)},o.id="x61t",n.exports=o}}]);