import { MapboxEvent, MapContextEvent, MapDataEvent, MapSourceDataEvent, MapStyleDataEvent, MapBoxZoomEvent, MapTouchEvent, MapMouseEvent, MapWheelEvent, MapLayerMouseEvent, MapLayerTouchEvent, MapEventType, MapLayerEventType } from 'mapbox-gl';
export declare type EventAll = MapEventType & MapLayerEventType;
export declare type EventListAll = MapEventList & MapLayerEventList & MarkerEventList;
export declare type EventMapping<U = {}, C = {}> = Partial<{
    [T in keyof U]: keyof C;
}>;
export declare type EventCallBack<T = {}> = (eventData?: T) => void;
export declare type Listeners<U> = {
    [T in keyof U]?: (evt: EventCallBack) => void;
};
export declare type MapEventList = {
    onError: EventCallBack<ErrorEvent>;
    onLoad: EventCallBack<MapboxEvent>;
    onRemove: EventCallBack<MapboxEvent>;
    onRender: EventCallBack<MapboxEvent>;
    onResize: EventCallBack<MapboxEvent>;
    onWebGlContextLost: EventCallBack<MapContextEvent>;
    onWebGlContextRestored: EventCallBack<MapContextEvent>;
    onDataLoading: EventCallBack<MapDataEvent>;
    onData: EventCallBack<MapDataEvent>;
    onTileDataLoading: EventCallBack<MapDataEvent>;
    onSourceDataLoading: EventCallBack<MapSourceDataEvent>;
    onStyleDataLoading: EventCallBack<MapStyleDataEvent>;
    onSourceData: EventCallBack<MapSourceDataEvent>;
    onStyleData: EventCallBack<MapStyleDataEvent>;
    onBoxZoomCancel: EventCallBack<MapBoxZoomEvent>;
    onBoxZoomStart: EventCallBack<MapBoxZoomEvent>;
    onBoxZoomEnd: EventCallBack<MapBoxZoomEvent>;
    onTouchCancel: EventCallBack<MapTouchEvent>;
    onTouchMove: EventCallBack<MapTouchEvent>;
    onTouchEnd: EventCallBack<MapTouchEvent>;
    onTouchStart: EventCallBack<MapTouchEvent>;
    onClick: EventCallBack<MapMouseEvent>;
    onContextMenu: EventCallBack<MapMouseEvent>;
    onDblClick: EventCallBack<MapMouseEvent>;
    onMouseMove: EventCallBack<MapMouseEvent>;
    onMouseUp: EventCallBack<MapMouseEvent>;
    onMouseDown: EventCallBack<MapMouseEvent>;
    onMouseOut: EventCallBack<MapMouseEvent>;
    onMouseOver: EventCallBack<MapMouseEvent>;
    onMoveStart: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined>>;
    onMove: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined>>;
    onMoveEnd: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined>>;
    onZoomStart: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined>>;
    onZoom: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined>>;
    onZoomEnd: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined>>;
    onRotateStart: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onRotate: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onRotateEnd: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onDragStart: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onDrag: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onDragEnd: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onPitchStart: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onPitch: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onPitchEnd: EventCallBack<MapboxEvent<MouseEvent | TouchEvent | undefined>>;
    onWheel: EventCallBack<MapWheelEvent>;
};
export declare type MapLayerEventList = {
    onClick: EventCallBack<MapLayerMouseEvent>;
    onDblClick: EventCallBack<MapLayerMouseEvent>;
    onMouseDown: EventCallBack<MapLayerMouseEvent>;
    onMouseUp: EventCallBack<MapLayerMouseEvent>;
    onMouseMove: EventCallBack<MapLayerMouseEvent>;
    onMouseEnter: EventCallBack<MapLayerMouseEvent>;
    onMouseLeave: EventCallBack<MapLayerMouseEvent>;
    onMouseOver: EventCallBack<MapLayerMouseEvent>;
    onMouseOut: EventCallBack<MapLayerMouseEvent>;
    onContextMenu: EventCallBack<MapLayerMouseEvent>;
    onTouchStart: EventCallBack<MapLayerTouchEvent>;
    onTouchEnd: EventCallBack<MapLayerTouchEvent>;
    onTouchCancel: EventCallBack<MapLayerTouchEvent>;
};
declare type MarkerEvent = {
    type: 'drag' | 'dragend' | 'dragstart';
    target: mapboxgl.Marker;
};
export declare type MarkerEventList = {
    onDragStart: EventCallBack<MarkerEvent>;
    onDrag: EventCallBack<MarkerEvent>;
    onDragEnd: EventCallBack<MarkerEvent>;
};
export declare const eventsMap: EventMapping<MapEventList, MapEventType>;
export declare const eventsLayer: EventMapping<MapLayerEventList, MapLayerEventType>;
export declare const eventsMarker: EventMapping<MarkerEventList, any>;
export declare function addEvents<T = any, U = any>(eventsMap: EventMapping<T, U>, props: Partial<T>, map: mapboxgl.Map | mapboxgl.Marker): Listeners<T>;
export declare function updateEvents<T = any, U = any>(listeners: Listeners<T>, nextProps: Partial<T>, map: mapboxgl.Map | mapboxgl.Marker, eventsMap: EventMapping<T, U>): Listeners<T>;
export {};
